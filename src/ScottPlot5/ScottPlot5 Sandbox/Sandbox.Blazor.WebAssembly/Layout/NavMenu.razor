@inject IRecipesService RecipeService
@inject IResizeService ResizeService
@inject NavigationManager NavManager
@implements IDisposable

<div class="@NavMenuTopCssClass d-flex align-items-center justify-content-between p-2">

    @if (!IsMenuCollapsed)
    {
        <img src="favicon.svg" height="36px" class="" />
        <div class="text-light fs-5">ScottPlot Blazor Demo</div>
    }
    <div class="burger">
        <div title="Navigation menu" @onclick="ToggleIconMenu">
            @if (IsMenuCollapsed)
            {
                <svg width="36px" height="36px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4 18L20 18" stroke="#000000" stroke-width="2" stroke-linecap="round" />
                    <path d="M4 12L20 12" stroke="#000000" stroke-width="2" stroke-linecap="round" />
                    <path d="M4 6L20 6" stroke="#000000" stroke-width="2" stroke-linecap="round" />
                </svg>
            }
            else
            {
                <svg class="border border-light rounded"
                     width="36px" height="36px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4 18L20 18" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" />
                    <path d="M4 12L20 12" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" />
                    <path d="M4 6L20 6" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" />
                </svg>
            }
        </div>
    </div>

</div>

@if (!IsMenuCollapsed)
{
    <div class="@NavMenuCssClass nav-scrollable">
        <h2 class="mt-4 fs-6 ps-3 fw-bold">Getting Started</h2>
        <div class="sidebar-button" @onclick='() => NavigateTo("quickstart")'>
            <a class="sidebar-button">Quickstart</a>
        </div>
        <div class="sidebar-button" @onclick='() => NavigateTo("signal")'>
            <a class="sidebar-button">Performance Test</a>
        </div>
        <hr />

        <h1 class="mt-4 fs-3 ps-3">ScottPlot Cookbook</h1>
        <div class="px-3">
            <input class="form-control w-100" @bind-value="SearchTerm" placeholder="Search..." @bind-value:event="oninput" />
        </div>

        <nav class="flex-column px-2">
            @foreach (string chapter in GetFilteredRecipeChapters())
            {
                <h1 class="mt-4 fs-4 ps-2">@chapter</h1>

                @foreach (ICategory category in GetFilteredRecipeCategories(chapter))
                {
                    <h2 class="mt-4 fs-6 ps-2 fw-bold">@category.CategoryName</h2>

                    @foreach (IRecipe recipe in GetFilteredRecipes(category))
                    {
                        @if (RecipeService.IsSelected(recipe))
                        {
                            <div class="sidebar-selected">
                                <a>@recipe.Name</a>
                            </div>
                        }
                        else
                        {
                            <div class="sidebar-button" @onclick="() => ShowRecipe(recipe)">
                                <a>@recipe.Name</a>
                            </div>
                        }
                    }
                }
            }
        </nav>
    </div>
}

@code {
    string _SearchTerm = string.Empty;
    string SearchTerm { get => _SearchTerm; set { _SearchTerm = value; UpdateFilter(); } }

    private bool? _wasLargeScreen = null;
    /// <summary>
    /// For "small device" to show/hide drop-down menu
    /// </summary>
    private bool IsMenuCollapsed { get; set; }
    private string? NavMenuCssClass => IsMenuCollapsed ? "collapse" : null;
    private string? NavMenuTopCssClass => IsMenuCollapsed ? "top-row-hide" : "top-row-show";
    private string BurgerIconColor => IsMenuCollapsed ? "#000000" : "#FFFFFF";

    /// <summary>
    /// EventCallback for sending bool to MainLayout to update side bar width when
    /// side bar is collapsed (for large screen devices)
    /// </summary>
    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    protected override void OnInitialized()
    {
        UpdateFilter();
        RecipeService.RecipeChanged += this.StateHasChanged; // subscribe
        ResizeService.ResizeAction += this.OnSizeChanged;
        OnSizeChanged(new System.Drawing.SizeF());
    }

    public void Dispose()
    {
        RecipeService.RecipeChanged -= this.StateHasChanged; // unsubscribe
        ResizeService.ResizeAction -= this.OnSizeChanged;
    }

    /// <summary>
    /// On "large device" to minimize side menu bar
    /// </summary>
    private async Task ToggleIconMenu()
    {
        IsMenuCollapsed = !IsMenuCollapsed;
        // to inform MainLayout about parameter changes
        await ShowIconMenu.InvokeAsync(IsMenuCollapsed);
    }

    private void OnSizeChanged(System.Drawing.SizeF newSize)
    {
        InvokeAsync(async () =>
        {
            // add little delay to ensure BlazorPlot is visible to ensure refresh works!
            await Task.Delay(1);
            if (_wasLargeScreen != ResizeService.IsLargeScreen)
            {
                _wasLargeScreen = ResizeService.IsLargeScreen;
                IsMenuCollapsed = _wasLargeScreen == false;
            }
        });
    }
    private void UpdateFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredRecipes = AllRecipes;
            return;
        }

        string term = SearchTerm.Trim();

        List<Query.RecipeInfo> hits = [];
        foreach (Query.RecipeInfo info in AllRecipes)
        {
            bool hit = false;
            hit |= info.Category.CategoryName.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Category.CategoryDescription.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Recipe.Name.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Recipe.Description.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            if (hit)
                hits.Add(info);
        }

        FilteredRecipes = hits;
    }

    private IEnumerable<Query.RecipeInfo> AllRecipes = Query.GetRecipes().Where(x => x.Recipe.Name != "Signal Plot Performance");
    private IEnumerable<Query.RecipeInfo> FilteredRecipes = [];
    private IEnumerable<string> GetFilteredRecipeChapters() => FilteredRecipes.Select(x => x.Chapter).Distinct();
    private IEnumerable<ICategory> GetFilteredRecipeCategories(string chapter) => FilteredRecipes.Where(x => x.Chapter == chapter).Select(x => x.Category).Distinct();
    private IEnumerable<IRecipe> GetFilteredRecipes(ICategory category) => FilteredRecipes.Where(x => x.Category.CategoryName == category.CategoryName).Select(x => x.Recipe);

    /// <summary>
    /// Navigates to a specified URI
    /// </summary>
    /// <param name="uri">The destination URI. This can be absolute, or relative to the base URI</param>
    /// <param name="replace">If true, replaces the current entry in the history stack. If false, appends the new entry to the history stack.</param>
    protected void NavigateTo(string uri, bool replace = false)
    {
        // for small devies, to collapse the dropdown menu
        IsMenuCollapsed = _wasLargeScreen == false;
        NavManager.NavigateTo(uri, replace: replace);
    }

    /// <summary>
    /// Navigates to q specified recipe.
    /// </summary>
    /// <param name="recipe">Recipe to be dispayed.</param>
    protected void ShowRecipe(IRecipe recipe)
    {
        // for small devies, to collapse the dropdown menu
        IsMenuCollapsed = _wasLargeScreen == false;
        NavigateTo($"recipe/{recipe.GetType().Name}", true);
        RecipeService.Recipe = recipe;
    }
}
