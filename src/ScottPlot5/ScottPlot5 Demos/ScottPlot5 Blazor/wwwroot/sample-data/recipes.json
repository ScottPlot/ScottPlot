{
  "version": "5.0.25",
  "dateUtc": "2024-04-14T20:19:52",
  "recipeCount": 180,
  "jsonSizeKb": 228,
  "chapters": [
    "Introduction",
    "Axis",
    "Plot Types",
    "Statistics",
    "Miscellaneous"
  ],
  "categories": [
    {
      "chapter": "Plot Types",
      "name": "Annotation",
      "description": "Annotations are always-visible text labels positioned over the data area.",
      "url": "/cookbook/5.0/Annotation"
    },
    {
      "chapter": "Plot Types",
      "name": "Arrow",
      "description": "Arrows point to a location in coordinate space.",
      "url": "/cookbook/5.0/ArrowCoordinated"
    },
    {
      "chapter": "Plot Types",
      "name": "Axis Lines",
      "description": "Axis lines indicate a position on an axis.",
      "url": "/cookbook/5.0/AxisLines"
    },
    {
      "chapter": "Plot Types",
      "name": "Axis Spans",
      "description": "Axis spans indicate a range of an axis.",
      "url": "/cookbook/5.0/AxisSpans"
    },
    {
      "chapter": "Plot Types",
      "name": "Bar Plot",
      "description": "Bar plots represent values as horizontal or vertical rectangles",
      "url": "/cookbook/5.0/Bar"
    },
    {
      "chapter": "Plot Types",
      "name": "Box Plot",
      "description": "Box plots show a distribution at a glance",
      "url": "/cookbook/5.0/Box"
    },
    {
      "chapter": "Plot Types",
      "name": "Callout",
      "description": "Callouts display a label and are connected with an arrow that marks a point on the plot.",
      "url": "/cookbook/5.0/Callout"
    },
    {
      "chapter": "Plot Types",
      "name": "Ellipse",
      "description": "Ellipses are curves with a defined center and distinct X and Y radii. A circle is an ellipse with an X radius equal to its Y radius.",
      "url": "/cookbook/5.0/Ellipse"
    },
    {
      "chapter": "Plot Types",
      "name": "Error Bars",
      "description": "Error Bars communicate the range of possible values for a measurement",
      "url": "/cookbook/5.0/ErrorBar"
    },
    {
      "chapter": "Plot Types",
      "name": "FillY plot",
      "description": "FillY plots display the vertical range between two Y values at defined X positions",
      "url": "/cookbook/5.0/FillY"
    },
    {
      "chapter": "Plot Types",
      "name": "Financial Plot",
      "description": "Finance plots display price data binned into time ranges",
      "url": "/cookbook/5.0/Finance"
    },
    {
      "chapter": "Plot Types",
      "name": "Function",
      "description": "Function plots are a type of line plot where Y positions are defined by a function that depends on X rather than a collection of discrete data points.",
      "url": "/cookbook/5.0/Function"
    },
    {
      "chapter": "Plot Types",
      "name": "Heatmap",
      "description": "Heatmaps display values from 2D data as an image with cells of different intensities",
      "url": "/cookbook/5.0/Heatmap"
    },
    {
      "chapter": "Plot Types",
      "name": "Line Plot",
      "description": "Line plots can be placed on the plot in coordinate space using a Start, End, and an optional LineStyle.",
      "url": "/cookbook/5.0/LinePlot"
    },
    {
      "chapter": "Plot Types",
      "name": "Marker",
      "description": "Markers can be placed on the plot in coordinate space.",
      "url": "/cookbook/5.0/Marker"
    },
    {
      "chapter": "Plot Types",
      "name": "Pie",
      "description": "Pie charts illustrate numerical proportions as slices of a circle.",
      "url": "/cookbook/5.0/Pie"
    },
    {
      "chapter": "Plot Types",
      "name": "Radial gauge",
      "description": "A radial gauge chart displays scalar data as circular gauges.",
      "url": "/cookbook/5.0/RadialGauge"
    },
    {
      "chapter": "Plot Types",
      "name": "Scatter Plot",
      "description": "Scatter plots display points at X/Y locations in coordinate space.",
      "url": "/cookbook/5.0/Scatter"
    },
    {
      "chapter": "Plot Types",
      "name": "Shapes",
      "description": "Basic shapes that can be added to plots",
      "url": "/cookbook/5.0/Shapes"
    },
    {
      "chapter": "Plot Types",
      "name": "Signal Plot",
      "description": "Signal plots display evenly-spaced data",
      "url": "/cookbook/5.0/Signal"
    },
    {
      "chapter": "Plot Types",
      "name": "SignalConst",
      "description": "SignalConst is a type of signal plot which contains immutable data points and occupies more memory but offers greater performance for extremely large datasets. It is rarely needed, but best use for plotting data containing millions of points.",
      "url": "/cookbook/5.0/SignalConst"
    },
    {
      "chapter": "Plot Types",
      "name": "SignalXY Plot",
      "description": "SignalXY are a high performance plot type optimized for X/Y pairs where the X values are always ascending. For large datasets SignalXY plots are much more performant than Scatter plots (which allow unordered X points) but not as performant as Signal plots (which require fixed spacing between X points).",
      "url": "/cookbook/5.0/SignalXY"
    },
    {
      "chapter": "Plot Types",
      "name": "Text",
      "description": "Text labels can be placed on the plot in coordinate space",
      "url": "/cookbook/5.0/Text"
    },
    {
      "chapter": "Plot Types",
      "name": "Vector Field",
      "description": "Vector fields display a collection of vectors rooted at points in coordinate space",
      "url": "/cookbook/5.0/VectorField"
    },
    {
      "chapter": "Statistics",
      "name": "Regression",
      "description": "Statistical operations to fit lines to data",
      "url": "/cookbook/5.0/Regression"
    },
    {
      "chapter": "Miscellaneous",
      "name": "Advanced Styling",
      "description": "Features for users seeking extensive customization options.",
      "url": "/cookbook/5.0/AdvancedStyling"
    },
    {
      "chapter": "Miscellaneous",
      "name": "Internationalization",
      "description": "Using ScottPlot across cultures with different text and numeric requirements.",
      "url": "/cookbook/5.0/Internationalization"
    },
    {
      "chapter": "Introduction",
      "name": "Quickstart",
      "description": "A survey of basic functionality in ScottPlot 5",
      "url": "/cookbook/5.0/ScottPlotQuickstart"
    },
    {
      "chapter": "Introduction",
      "name": "Axis and Ticks",
      "description": "Examples of common customizations for axis labels and ticks",
      "url": "/cookbook/5.0/AxisAndTicks"
    },
    {
      "chapter": "Introduction",
      "name": "Configuring Legends",
      "description": "A legend is a key typically displayed in the corner of a plot",
      "url": "/cookbook/5.0/Legend"
    },
    {
      "chapter": "Introduction",
      "name": "Styling Plots",
      "description": "How to customize appearance of plots",
      "url": "/cookbook/5.0/Styling"
    },
    {
      "chapter": "Axis",
      "name": "Advanced Axis Features",
      "description": "How to further customize axes",
      "url": "/cookbook/5.0/AdvancedAxis"
    },
    {
      "chapter": "Axis",
      "name": "Customizing Grids",
      "description": "Advanced customization of grid lines",
      "url": "/cookbook/5.0/CustomizingGrids"
    },
    {
      "chapter": "Axis",
      "name": "Customizing Ticks",
      "description": "Advanced customization of tick marks and tick labels",
      "url": "/cookbook/5.0/CustomizingTicks"
    },
    {
      "chapter": "Axis",
      "name": "DateTime Axes",
      "description": "Plot data values on a DataTime axes",
      "url": "/cookbook/5.0/DateTimeAxes"
    },
    {
      "chapter": "Axis",
      "name": "Multiple Axes",
      "description": "Tick mark customization and creation of multi-Axis plots",
      "url": "/cookbook/5.0/MultiAxis"
    }
  ],
  "recipes": [
    {
      "chapter": "Axis",
      "category": "Advanced Axis Features",
      "name": "Inverted Axis",
      "description": "Users can display data on an inverted axis by setting axis limits setting the lower edge to a value more positive than the upper edge.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.SetLimitsY(bottom: 1.5, top: -1.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedAxis",
      "recipeClassName": "InvertedAxis",
      "anchorUrl": "/cookbook/5.0/AdvancedAxis#InvertedAxis",
      "categoryUrl": "/cookbook/5.0/AdvancedAxis",
      "recipeUrl": "/cookbook/5.0/AdvancedAxis/InvertedAxis",
      "imageUrl": "/cookbook/5.0/images/InvertedAxis.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/AdvancedAxis.cs"
    },
    {
      "chapter": "Axis",
      "category": "Advanced Axis Features",
      "name": "Inverted Auto-Axis",
      "description": "Customize the logic for the automatic axis scaler to ensure that axis limits for a particular axis are always inverted when autoscaled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.AutoScaler.InvertedY = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedAxis",
      "recipeClassName": "InvertedAutoAxis",
      "anchorUrl": "/cookbook/5.0/AdvancedAxis#InvertedAutoAxis",
      "categoryUrl": "/cookbook/5.0/AdvancedAxis",
      "recipeUrl": "/cookbook/5.0/AdvancedAxis/InvertedAutoAxis",
      "imageUrl": "/cookbook/5.0/images/InvertedAutoAxis.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/AdvancedAxis.cs"
    },
    {
      "chapter": "Axis",
      "category": "Advanced Axis Features",
      "name": "SquareAxisUnits",
      "description": "Axis rules can be put in place which force the vertical scale (units per pixel) to match the horizontal scale so circles always appear as circles and not stretched ellipses.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Circle(0, 0, 10);\n\n// force pixels to have a 1:1 scale ratio\nmyPlot.Axes.SquareUnits();\n\n// even if you try to \u0022stretch\u0022 the axis, it will adjust the axis limits automatically\nmyPlot.Axes.SetLimits(-10, 10, -20, 20);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedAxis",
      "recipeClassName": "SquareAxisUnits",
      "anchorUrl": "/cookbook/5.0/AdvancedAxis#SquareAxisUnits",
      "categoryUrl": "/cookbook/5.0/AdvancedAxis",
      "recipeUrl": "/cookbook/5.0/AdvancedAxis/SquareAxisUnits",
      "imageUrl": "/cookbook/5.0/images/SquareAxisUnits.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/AdvancedAxis.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Grids",
      "name": "Hide Grid",
      "description": "Grid lines can be hidden.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "HideGrid",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#HideGrid",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/HideGrid",
      "imageUrl": "/cookbook/5.0/images/HideGrid.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingGrids.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Grids",
      "name": "Grid Customization",
      "description": "Grid lines can be customized. Custom grid systems can be created to give developers full control of grid rendering, but the default grid can be interacted with to customize its appearance.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Grid.MajorLineColor = Colors.Green.WithOpacity(.5);\nmyPlot.Grid.MinorLineColor = Colors.Green.WithOpacity(.1);\nmyPlot.Grid.MinorLineWidth = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridCustom",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridCustom",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridCustom",
      "imageUrl": "/cookbook/5.0/images/GridCustom.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingGrids.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Grids",
      "name": "Axis Specific Grid Customization",
      "description": "Axis-specific styling properties are available for extensive axis-specific customization of grid line styling.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Color = Colors.Magenta.WithAlpha(.1);\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Width = 5;\n\nmyPlot.Grid.YAxisStyle.MajorLineStyle.Color = Colors.Green.WithAlpha(.3);\nmyPlot.Grid.YAxisStyle.MajorLineStyle.Width = 2;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridCustomAxis",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridCustomAxis",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridCustomAxis",
      "imageUrl": "/cookbook/5.0/images/GridCustomAxis.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingGrids.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Grids",
      "name": "Grid Above Data",
      "description": "Grid lines are typically drawn beneath data, but grids can be configured to render on top of plottables too.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig = myPlot.Add.Signal(ScottPlot.Generate.Sin());\nsig.LineWidth = 10;\n\nmyPlot.Grid.MajorLineWidth = 3;\nmyPlot.Grid.MajorLineColor = Colors.WhiteSmoke;\nmyPlot.Grid.IsBeneathPlottables = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridAbove",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridAbove",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridAbove",
      "imageUrl": "/cookbook/5.0/images/GridAbove.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingGrids.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Custom Tick Formatters",
      "description": "Users can customize the logic used to create tick labels from tick positions. Old versions of ScottPlot achieved this using a ManualTickPositions method.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(100, 1, -50);\nmyPlot.Add.Scatter(xs, Generate.Sin(100));\nmyPlot.Add.Scatter(xs, Generate.Cos(100));\n\n// create a static function containing the string formatting logic\nstatic string CustomFormatter(double position)\n{\n    if (position == 0)\n        return \u00220\u0022;\n    else if (position \u003E 0)\n        return $\u0022\u002B{position}\u0022;\n    else\n        return $\u0022({-position})\u0022;\n}\n\n// create a custom tick generator using your custom label formatter\nScottPlot.TickGenerators.NumericAutomatic myTickGenerator = new()\n{\n    LabelFormatter = CustomFormatter\n};\n\n// tell an axis to use the custom tick generator\nmyPlot.Axes.Bottom.TickGenerator = myTickGenerator;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTickFormatter",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTickFormatter",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTickFormatter",
      "imageUrl": "/cookbook/5.0/images/CustomTickFormatter.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Custom Tick Generators",
      "description": "Tick generators determine where ticks are to be placed and also contain logic for generating tick labels from tick positions. Alternative tick generators can be created and assigned to axes. Some common tick generators are provided with ScottPlot, and users also have the option create their own.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericFixedInterval(11);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "AltTickGen",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#AltTickGen",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/AltTickGen",
      "imageUrl": "/cookbook/5.0/images/AltTickGen.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Custom Tick Positions",
      "description": "Users can define ticks to be placed at specific locations.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// display sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// create a manual tick generator and add ticks\nScottPlot.TickGenerators.NumericManual ticks = new();\n\n// add major ticks with their labels\nticks.AddMajor(0, \u0022zero\u0022);\nticks.AddMajor(20, \u0022twenty\u0022);\nticks.AddMajor(50, \u0022fifty\u0022);\n\n// add minor ticks\nticks.AddMinor(22);\nticks.AddMinor(25);\nticks.AddMinor(32);\nticks.AddMinor(35);\nticks.AddMinor(42);\nticks.AddMinor(45);\n\n// tell the horizontal axis to use the custom tick genrator\nmyPlot.Axes.Bottom.TickGenerator = ticks;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTicks",
      "imageUrl": "/cookbook/5.0/images/CustomTicks.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Rotated Tick Labels",
      "description": "Users can customize tick label rotation.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.Bottom.TickLabelStyle.Rotation = -45;\nmyPlot.Axes.Bottom.TickLabelStyle.OffsetY = -8;\nmyPlot.Axes.Bottom.TickLabelStyle.Alignment = Alignment.MiddleRight;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "RotatedTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#RotatedTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/RotatedTicks",
      "imageUrl": "/cookbook/5.0/images/RotatedTicks.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Rotated Tick with Long Labels",
      "description": "The axis size can be increased to accommodate rotated or long tick labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a bar plot\ndouble[] values = { 5, 10, 7, 13, 25, 60 };\nmyPlot.Add.Bars(values);\nmyPlot.Axes.Margins(bottom: 0);\n\n// create a tick for each bar\nTick[] ticks =\n{\n    new(0, \u0022First Long Title\u0022),\n    new(1, \u0022Second Long Title\u0022),\n    new(2, \u0022Third Long Title\u0022),\n    new(3, \u0022Fourth Long Title\u0022),\n    new(4, \u0022Fifth Long Title\u0022),\n    new(5, \u0022Sixth Long Title\u0022)\n};\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.TickLabelStyle.Rotation = 45;\nmyPlot.Axes.Bottom.TickLabelStyle.Alignment = Alignment.MiddleLeft;\n\n// determine the width of the largest tick label\nfloat largestLabelWidth = 0;\nforeach (Tick tick in ticks)\n{\n    PixelSize size = myPlot.Axes.Bottom.TickLabelStyle.Measure(tick.Label);\n    largestLabelWidth = Math.Max(largestLabelWidth, size.Width);\n}\n\n// ensure axis panels do not get smaller than the largest label\nmyPlot.Axes.Bottom.MinimumSize = largestLabelWidth;\nmyPlot.Axes.Right.MinimumSize = largestLabelWidth;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "RotatedTicksLongLabels",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#RotatedTicksLongLabels",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/RotatedTicksLongLabels",
      "imageUrl": "/cookbook/5.0/images/RotatedTicksLongLabels.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Disable Grid Lines",
      "description": "Users can disable grid lines for specific axes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Grid.XAxisStyle.IsVisible = true;\nmyPlot.Grid.YAxisStyle.IsVisible = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "DisableGridLines",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#DisableGridLines",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/DisableGridLines",
      "imageUrl": "/cookbook/5.0/images/DisableGridLines.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Minimum Tick Spacing",
      "description": "Space between ticks can be increased by setting a value to indicate the minimum distance between tick labels (in pixels).",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.MinimumTickSpacing = 50;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.MinimumTickSpacing = 25;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "MinimumTickSpacing",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#MinimumTickSpacing",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/MinimumTickSpacing",
      "imageUrl": "/cookbook/5.0/images/MinimumTickSpacing.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Tick Density",
      "description": "Tick density can be adjusted as a fraction of the default value. Unlike MinimumTickSpacing, this strategy is aware of the size of tick labels and adjusts accordingly.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.TickDensity = 0.2;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.TickDensity = 0.2;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "TickDensity",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#TickDensity",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/TickDensity",
      "imageUrl": "/cookbook/5.0/images/TickDensity.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Tick Count",
      "description": "A target number of ticks can be provided and the automatic tick generator will attempt to place that number of ticks. This strategy allows tick density to decrease as the image size increases.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.TargetTickCount = 3;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.TargetTickCount = 3;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "TickCount",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#TickCount",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/TickCount",
      "imageUrl": "/cookbook/5.0/images/TickCount.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Minor Tick Density",
      "description": "Minor tick marks are automatically generated at intervals between major tick marks. By default they are evenly spaced, but their density may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\ndouble[] xs = Generate.Consecutive(100);\ndouble[] ys = Generate.NoisyExponential(100);\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.LineWidth = 0;\n\n// create a minor tick generator with 10 minor ticks per major tick\nScottPlot.TickGenerators.EvenlySpacedMinorTickGenerator minorTickGen = new(10);\n\n// create a numeric tick generator that uses our custom minor tick generator\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\ntickGen.MinorTickGenerator = minorTickGen;\n\n// tell the left axis to use our custom tick generator\nmyPlot.Axes.Left.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "StandardMinorTickDistribution",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#StandardMinorTickDistribution",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/StandardMinorTickDistribution",
      "imageUrl": "/cookbook/5.0/images/StandardMinorTickDistribution.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Log Scale Tick Marks",
      "description": "The apperance of logarithmic scaling can be achieved by log-scaling the data to be displayed then customizing the minor ticks and grid.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// start with original data\ndouble[] xs = Generate.Consecutive(100);\ndouble[] ys = Generate.NoisyExponential(100);\n\n// log-scale the data and account for negative values\ndouble[] logYs = ys.Select(Math.Log10).ToArray();\n\n// add log-scaled data to th eplot\nvar sp = myPlot.Add.Scatter(xs, logYs);\nsp.LineWidth = 0;\n\n// create a minor tick generator that places log-distributed minor ticks\nScottPlot.TickGenerators.LogMinorTickGenerator minorTickGen = new();\n\n// create a numeric tick generator that uses our custom minor tick generator\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\ntickGen.MinorTickGenerator = minorTickGen;\n\n// create a custom tick formatter to set the label text for each tick\nstatic string LogTickLabelFormatter(double y) =\u003E $\u0022{Math.Pow(10, y):N0}\u0022;\n\n// tell our major tick generator to only show major ticks that are whole integers\ntickGen.IntegerTicksOnly = true;\n\n// tell our custom tick generator to use our new label formatter\ntickGen.LabelFormatter = LogTickLabelFormatter;\n\n// tell the left axis to use our custom tick generator\nmyPlot.Axes.Left.TickGenerator = tickGen;\n\n// show grid lines for minor ticks\nmyPlot.Grid.MajorLineColor = Colors.Black.WithOpacity(.15);\nmyPlot.Grid.MinorLineColor = Colors.Black.WithOpacity(.05);\nmyPlot.Grid.MinorLineWidth = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "LogScaleTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#LogScaleTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/LogScaleTicks",
      "imageUrl": "/cookbook/5.0/images/LogScaleTicks.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs"
    },
    {
      "chapter": "Axis",
      "category": "DateTime Axes",
      "name": "DateTime Axis Quickstart",
      "description": "Axis tick labels can be displayed using a time format.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot data using DateTime units\nDateTime[] dates = Generate.DateTime.Days(100);\ndouble[] ys = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(dates, ys);\n\n// tell the plot to display dates on the bottom axis\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "DateTimeAxes",
      "recipeClassName": "DateTimeAxisQuickstart",
      "anchorUrl": "/cookbook/5.0/DateTimeAxes#DateTimeAxisQuickstart",
      "categoryUrl": "/cookbook/5.0/DateTimeAxes",
      "recipeUrl": "/cookbook/5.0/DateTimeAxes/DateTimeAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/DateTimeAxes.cs"
    },
    {
      "chapter": "Axis",
      "category": "DateTime Axes",
      "name": "DateTime Axis Values",
      "description": "DateTime axes are achieved using Microsoft\u0027s DateTime.ToOADate() and DateTime.FromOADate() methods to convert between dates and numeric values. Advanced users who wish to display data on DateTime axes may prefer to work with collections of doubles rather than collections of DateTimes.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create an array of DateTimes one hour apart\nint numberOfHours = 24;\nDateTime[] dateTimes = new DateTime[numberOfHours];\nDateTime startDateTime = new(2024, 1, 1);\nTimeSpan deltaTimeSpan = TimeSpan.FromHours(1);\nfor (int i = 0; i \u003C numberOfHours; i\u002B\u002B)\n{\n    dateTimes[i] = startDateTime \u002B i * deltaTimeSpan;\n}\n\n// create an array of doubles representing the same DateTimes one hour apart\ndouble[] dateDoubles = new double[numberOfHours];\ndouble startDouble = startDateTime.ToOADate(); // days since 1900\ndouble deltaDouble = 1.0 / 24.0; // an hour is 1/24 of a day\nfor (int i = 0; i \u003C numberOfHours; i\u002B\u002B)\n{\n    dateDoubles[i] = startDouble \u002B i * deltaDouble;\n}\n\n// now both arrays represent the same dates\nmyPlot.Add.Scatter(dateTimes, Generate.Sin(numberOfHours));\nmyPlot.Add.Scatter(dateDoubles, Generate.Cos(numberOfHours));\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "DateTimeAxes",
      "recipeClassName": "DateTimeAxisMixed",
      "anchorUrl": "/cookbook/5.0/DateTimeAxes#DateTimeAxisMixed",
      "categoryUrl": "/cookbook/5.0/DateTimeAxes",
      "recipeUrl": "/cookbook/5.0/DateTimeAxes/DateTimeAxisMixed",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisMixed.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/DateTimeAxes.cs"
    },
    {
      "chapter": "Axis",
      "category": "DateTime Axes",
      "name": "Custom DateTime Label Format",
      "description": "Users can provide their own logic for customizing DateTime tick labels",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample DateTime data\nDateTime[] dates = Generate.DateTime.Days(100);\ndouble[] ys = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(dates, ys);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// add logic into the RenderStarting event to customize tick labels\nmyPlot.RenderManager.RenderStarting \u002B= (s, e) =\u003E\n{\n    Tick[] ticks = myPlot.Axes.Bottom.TickGenerator.Ticks;\n    for (int i = 0; i \u003C ticks.Length; i\u002B\u002B)\n    {\n        DateTime dt = DateTime.FromOADate(ticks[i].Position);\n        string label = $\u0022{dt:MMM} \u0027{dt:yy}\u0022;\n        ticks[i] = new Tick(ticks[i].Position, label);\n    }\n};\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "DateTimeAxes",
      "recipeClassName": "DateTimeAxisCustomFormatter",
      "anchorUrl": "/cookbook/5.0/DateTimeAxes#DateTimeAxisCustomFormatter",
      "categoryUrl": "/cookbook/5.0/DateTimeAxes",
      "recipeUrl": "/cookbook/5.0/DateTimeAxes/DateTimeAxisCustomFormatter",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisCustomFormatter.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/DateTimeAxes.cs"
    },
    {
      "chapter": "Axis",
      "category": "Multiple Axes",
      "name": "Right Axis",
      "description": "New plots have one axis on every side. Axes on the right and top are invisible by default. To use the right axis, make it visible, then tell a plottable to use it. ",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot data with very different scales\nvar sig1 = myPlot.Add.Signal(Generate.Sin(mult: 0.01));\nvar sig2 = myPlot.Add.Signal(Generate.Cos(mult: 100));\n\n// tell each signal plot to use a different axis\nsig1.Axes.YAxis = myPlot.Axes.Left;\nsig2.Axes.YAxis = myPlot.Axes.Right;\n\n// add additional styling options to each axis\nmyPlot.Axes.Left.Label.Text = \u0022Left Axis\u0022;\nmyPlot.Axes.Right.Label.Text = \u0022Right Axis\u0022;\nmyPlot.Axes.Left.Label.ForeColor = sig1.Color;\nmyPlot.Axes.Right.Label.ForeColor = sig2.Color;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "MultiAxis",
      "recipeClassName": "RightAxis",
      "anchorUrl": "/cookbook/5.0/MultiAxis#RightAxis",
      "categoryUrl": "/cookbook/5.0/MultiAxis",
      "recipeUrl": "/cookbook/5.0/MultiAxis/RightAxis",
      "imageUrl": "/cookbook/5.0/images/RightAxis.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/MultiAxis.cs"
    },
    {
      "chapter": "Axis",
      "category": "Multiple Axes",
      "name": "Multi-Axis",
      "description": "Additional axes may be added to plots. Plottables are displayed using the coordinate system of the primary axes by default, but any plottable can be displayed using any X and Y axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plottables use the standard X and Y axes by default\nvar sig1 = myPlot.Add.Signal(ScottPlot.Generate.Sin(51, mult: 0.01));\nsig1.Axes.XAxis = myPlot.Axes.Bottom; // standard X axis\nsig1.Axes.YAxis = myPlot.Axes.Left; // standard Y axis\nmyPlot.Axes.Left.Label.Text = \u0022Primary Y Axis\u0022;\n\n// create a second axis and add it to the plot\nvar yAxis2 = myPlot.Axes.AddLeftAxis();\n\n// add a new plottable and tell it to use the custom Y axis\nvar sig2 = myPlot.Add.Signal(ScottPlot.Generate.Cos(51, mult: 100));\nsig2.Axes.XAxis = myPlot.Axes.Bottom; // standard X axis\nsig2.Axes.YAxis = yAxis2; // custom Y axis\nyAxis2.Label.Text = \u0022Secondary Y Axis\u0022;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "MultiAxis",
      "recipeClassName": "MultiAxisQuickstart",
      "anchorUrl": "/cookbook/5.0/MultiAxis#MultiAxisQuickstart",
      "categoryUrl": "/cookbook/5.0/MultiAxis",
      "recipeUrl": "/cookbook/5.0/MultiAxis/MultiAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/MultiAxisQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/MultiAxis.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Set Axis Limits",
      "description": "Axis Limits can be set by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.SetLimits(-100, 150, -5, 5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "SetAxisLimits",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#SetAxisLimits",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/SetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/SetAxisLimits.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Read Axis Limits",
      "description": "Use GetLimits() to obtain the current axis limits.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nAxisLimits limits = myPlot.Axes.GetLimits();\ndouble xMin = limits.Left;\ndouble xMax = limits.Right;\ndouble yMin = limits.Bottom;\ndouble yMax = limits.Top;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "GetAxisLimits",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#GetAxisLimits",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/GetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/GetAxisLimits.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "AutoScale Axis Limits to Fit Data",
      "description": "The axis limits can be automatically adjusted to fit the data. Optional arguments allow users to define the amount of whitespace around the edges of the data.In older versions of ScottPlot this functionality was achieved by a method named AxisAuto().",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// set limits that do not fit the data\nmyPlot.Axes.SetLimits(-100, 150, -5, 5);\n\n// reset limits to fit the data\nmyPlot.Axes.AutoScale();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "AutoScale",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#AutoScale",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/AutoScale",
      "imageUrl": "/cookbook/5.0/images/AutoScale.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Frameless Plot",
      "description": "How to create a plot containig only the data area and no axes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// make the data area cover the full figure\nmyPlot.Layout.Frameless();\n\n// set the data area background so we can observe its size\nmyPlot.DataBackground.Color = Colors.WhiteSmoke;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "Frameless",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#Frameless",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/Frameless",
      "imageUrl": "/cookbook/5.0/images/Frameless.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Legend Quickstart",
      "description": "Many plottables have a Label property that can be set so they appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.Label = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.Label = \u0022Cos\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendQuickstart",
      "anchorUrl": "/cookbook/5.0/Legend#LegendQuickstart",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendQuickstart",
      "imageUrl": "/cookbook/5.0/images/LegendQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Manual Legend Items",
      "description": "Legends may be constructed manually.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\nmyPlot.Legend.IsVisible = true;\n\nLegendItem item1 = new()\n{\n    LineColor = Colors.Magenta,\n    MarkerColor = Colors.Magenta,\n    LineWidth = 2,\n    Label = \u0022Alpha\u0022\n};\n\nLegendItem item2 = new()\n{\n    LineColor = Colors.Green,\n    MarkerColor = Colors.Green,\n    LineWidth = 4,\n    Label = \u0022Beta\u0022\n};\n\nLegendItem[] items = { item1, item2 };\nmyPlot.ShowLegend(items);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "ManualLegend",
      "anchorUrl": "/cookbook/5.0/Legend#ManualLegend",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/ManualLegend",
      "imageUrl": "/cookbook/5.0/images/ManualLegend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Legend Customization",
      "description": "Access the Legend object directly for advanced customization options.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.Label = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.Label = \u0022Cos\u0022;\n\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.OutlineStyle.Color = Colors.Navy;\nmyPlot.Legend.OutlineStyle.Width = 2;\nmyPlot.Legend.BackgroundFill.Color = Colors.LightBlue;\nmyPlot.Legend.ShadowFill.Color = Colors.Blue.WithOpacity(.5);\nmyPlot.Legend.Font.Size = 16;\nmyPlot.Legend.Font.Name = Fonts.Serif;\nmyPlot.Legend.Location = Alignment.UpperCenter;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendStyle",
      "anchorUrl": "/cookbook/5.0/Legend#LegendStyle",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendStyle",
      "imageUrl": "/cookbook/5.0/images/LegendStyle.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Legend Orientation",
      "description": "Legend items may be arranged horizontally instead of vertically",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51, phase: .2));\nvar sig2 = myPlot.Add.Signal(Generate.Sin(51, phase: .4));\nvar sig3 = myPlot.Add.Signal(Generate.Sin(51, phase: .6));\n\nsig1.Label = \u0022Signal 1\u0022;\nsig2.Label = \u0022Signal 2\u0022;\nsig3.Label = \u0022Signal 3\u0022;\n\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Orientation = Orientation.Horizontal;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendOrientation",
      "anchorUrl": "/cookbook/5.0/Legend#LegendOrientation",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendOrientation",
      "imageUrl": "/cookbook/5.0/images/LegendOrientation.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Legend Wrapping",
      "description": "Legend items may wrap to improve display for a large number of items",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 1; i \u003C= 10; i\u002B\u002B)\n{\n    var sig = myPlot.Add.Signal(Generate.Sin(51, phase: .02 * i));\n    sig.Label = $\u0022Signal #{i}\u0022;\n}\n\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Orientation = Orientation.Horizontal;\nmyPlot.Legend.AllowMultiline = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendWrapping",
      "anchorUrl": "/cookbook/5.0/Legend#LegendWrapping",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendWrapping",
      "imageUrl": "/cookbook/5.0/images/LegendWrapping.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Scatter Plot",
      "description": "Display paired X/Y data as a scatter plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] dataX = { 1, 2, 3, 4, 5 };\ndouble[] dataY = { 1, 4, 9, 16, 25 };\nmyPlot.Add.Scatter(dataX, dataY);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartScatter",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartScatter",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartScatter",
      "imageUrl": "/cookbook/5.0/images/QuickstartScatter.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Customizing Plottables",
      "description": "Functions that add things to plots return the plottables they create. Interact with the properties of plottables to customize their styling and behavior.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] dataX = { 1, 2, 3, 4, 5 };\ndouble[] dataY = { 1, 4, 9, 16, 25 };\nvar myScatter = myPlot.Add.Scatter(dataX, dataY);\nmyScatter.Color = Colors.Green.WithOpacity(.2);\nmyScatter.LineWidth = 5;\nmyScatter.MarkerSize = 15;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "CustomizingPlottables",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#CustomizingPlottables",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/CustomizingPlottables",
      "imageUrl": "/cookbook/5.0/images/CustomizingPlottables.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Signal Plot",
      "description": "Signal plots are optimized for displaying evenly spaced data.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\nmyPlot.Add.Signal(sin);\nmyPlot.Add.Signal(cos);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartSignal",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartSignal",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartSignal",
      "imageUrl": "/cookbook/5.0/images/QuickstartSignal.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Signal Plot Performance",
      "description": "Signal plots can interactively display millions of data points in real time. Double-click the plot to display performance benchmarks.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] data = Generate.RandomWalk(1_000_000);\nmyPlot.Add.Signal(data);\nmyPlot.Title(\u0022Signal plot with one million points\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "SignalPerformance",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#SignalPerformance",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/SignalPerformance",
      "imageUrl": "/cookbook/5.0/images/SignalPerformance.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Axis Labels",
      "description": "Axis labels can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.XLabel(\u0022Horizonal Axis\u0022);\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\nmyPlot.Title(\u0022Plot Title\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartAxisLabels",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartAxisLabels",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartAxisLabels",
      "imageUrl": "/cookbook/5.0/images/QuickstartAxisLabels.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Legend",
      "description": "A legend displays plottables in a key along the edge of a plot. Most plottables have a Label property which configures what text appears in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.Label = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.Label = \u0022Cos\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "Legend",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#Legend",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/Legend",
      "imageUrl": "/cookbook/5.0/images/Legend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Quickstart",
      "name": "Add Plottables Manually",
      "description": "Although the Plot.Add class has many helpful methods for creating plottable objects and adding them to the plot, users can instantiate plottable objects themselves and use Add.Plottable() to place it on the plot. This stategy allows users to create their own plottables (implementing IPlottable) with custom appearance or behavior.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a plottable and modify it as desired\nScottPlot.Plottables.Marker marker = new()\n{\n    X = 2,\n    Y = 3,\n    Size = 20,\n    Color = Colors.Magenta,\n    Shape = MarkerShape.OpenDiamond,\n    Label = \u0022My Marker\u0022,\n};\n\n// add the custom plottable to the plot\nmyPlot.Add.Plottable(marker);\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "AddPlottablesManually",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#AddPlottablesManually",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/AddPlottablesManually",
      "imageUrl": "/cookbook/5.0/images/AddPlottablesManually.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Quickstart.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Style Helper Functions",
      "description": "Plots contain many objects which can be customized individually by assigning to their public properties, but helper methods exist in the Plot\u0027s Style object that make it easier to customize many items at once using a simpler API.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// visible items have public properties that can be customized\nmyPlot.Axes.Bottom.Label.Text = \u0022Horizontal Axis\u0022;\nmyPlot.Axes.Left.Label.Text = \u0022Vertical Axis\u0022;\nmyPlot.Axes.Title.Label.Text = \u0022Plot Title\u0022;\n\n// some items must be styled directly\nmyPlot.Grid.MajorLineColor = Color.FromHex(\u0022#0e3d54\u0022);\nmyPlot.FigureBackground.Color = Color.FromHex(\u0022#07263b\u0022);\nmyPlot.DataBackground.Color = Color.FromHex(\u0022#0b3049\u0022);\n\n// the Style object contains helper methods to style many items at once\nmyPlot.Axes.Color(Color.FromHex(\u0022#a0acb5\u0022));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "StyleClass",
      "anchorUrl": "/cookbook/5.0/Styling#StyleClass",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/StyleClass",
      "imageUrl": "/cookbook/5.0/images/StyleClass.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Axis Customization",
      "description": "Axis labels, tick marks, and frame can all be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.Title.Label.Text = \u0022Plot Title\u0022;\nmyPlot.Axes.Title.Label.ForeColor = Colors.RebeccaPurple;\nmyPlot.Axes.Title.Label.FontSize = 32;\nmyPlot.Axes.Title.Label.FontName = Fonts.Serif;\nmyPlot.Axes.Title.Label.Rotation = -5;\nmyPlot.Axes.Title.Label.Bold = false;\n\nmyPlot.Axes.Left.Label.Text = \u0022Vertical Axis\u0022;\nmyPlot.Axes.Left.Label.ForeColor = Colors.Magenta;\nmyPlot.Axes.Left.Label.Italic = true;\n\nmyPlot.Axes.Bottom.Label.Text = \u0022Horizontal Axis\u0022;\nmyPlot.Axes.Bottom.Label.Bold = false;\nmyPlot.Axes.Bottom.Label.FontName = Fonts.Monospace;\n\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 10;\nmyPlot.Axes.Bottom.MajorTickStyle.Width = 3;\nmyPlot.Axes.Bottom.MajorTickStyle.Color = Colors.Magenta;\nmyPlot.Axes.Bottom.MinorTickStyle.Length = 5;\nmyPlot.Axes.Bottom.MinorTickStyle.Width = 0.5f;\nmyPlot.Axes.Bottom.MinorTickStyle.Color = Colors.Green;\nmyPlot.Axes.Bottom.FrameLineStyle.Color = Colors.Blue;\nmyPlot.Axes.Bottom.FrameLineStyle.Width = 3;\n\nmyPlot.Axes.Right.FrameLineStyle.Width = 0;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "AxisCustom",
      "anchorUrl": "/cookbook/5.0/Styling#AxisCustom",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/AxisCustom",
      "imageUrl": "/cookbook/5.0/images/AxisCustom.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Palettes",
      "description": "A palette is a set of colors, and the Plot\u0027s palette defines the default colors to use when adding new plottables. ScottPlot comes with many standard palettes, but users may also create their own.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// change the default palette used when adding new plottables\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] data = Generate.Sin(100, phase: -i / 20.0f);\n    var sig = myPlot.Add.Signal(data);\n    sig.LineWidth = 3;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Palette",
      "anchorUrl": "/cookbook/5.0/Styling#Palette",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Palette",
      "imageUrl": "/cookbook/5.0/images/Palette.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Markers",
      "description": "Many plot types have a MarkerStyle which can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nMarkerShape[] markerShapes = Enum.GetValues\u003CMarkerShape\u003E().ToArray();\n\nfor (int i = 0; i \u003C markerShapes.Length; i\u002B\u002B)\n{\n    double[] xs = Generate.Consecutive(20);\n    double[] ys = Generate.Sin(20, offset: markerShapes.Length - i);\n    var scatter = myPlot.Add.Scatter(xs, ys);\n    scatter.MarkerStyle.Shape = markerShapes[i];\n    scatter.MarkerStyle.Size = 10;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Markers",
      "anchorUrl": "/cookbook/5.0/Styling#Markers",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Markers",
      "imageUrl": "/cookbook/5.0/images/Markers.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Marker Names",
      "description": "Markers can be referred to by their name.",
      "source": "ScottPlot.Plot myPlot = new();\n\nMarkerShape[] markerShapes = Enum.GetValues\u003CMarkerShape\u003E().ToArray();\nScottPlot.Palettes.Category20 palette = new();\n\nfor (int i = 0; i \u003C markerShapes.Length; i\u002B\u002B)\n{\n    var mp = myPlot.Add.Marker(x: i, y: 0);\n    mp.MarkerStyle.Shape = markerShapes[i];\n    mp.MarkerStyle.Size = 10;\n    mp.MarkerStyle.Outline.Width = 1.5f;\n    mp.MarkerStyle.Outline.Color = palette.GetColor(i);\n    mp.MarkerStyle.Fill.Color = palette.GetColor(i).WithAlpha(.5);\n\n    var txt = myPlot.Add.Text(markerShapes[i].ToString(), i, 0.15);\n    txt.Label.Rotation = -90;\n    txt.Label.Alignment = Alignment.MiddleLeft;\n}\n\nmyPlot.Title(\u0022Marker Names\u0022);\nmyPlot.Axes.SetLimits(-1, markerShapes.Length, -1, 4);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "MarkerNames",
      "anchorUrl": "/cookbook/5.0/Styling#MarkerNames",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/MarkerNames",
      "imageUrl": "/cookbook/5.0/images/MarkerNames.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Line Styles",
      "description": "Many plot types have a LineStyle which can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nLinePattern[] linePatterns = Enum.GetValues\u003CLinePattern\u003E().ToArray();\n\nfor (int i = 0; i \u003C linePatterns.Length; i\u002B\u002B)\n{\n    LinePattern pattern = linePatterns[i];\n\n    var line = myPlot.Add.Line(0, -i, 1, -i);\n    line.LinePattern = pattern;\n    line.LineWidth = 2;\n    line.Color = Colors.Black;\n\n    var txt = myPlot.Add.Text(pattern.ToString(), 1.1, -i);\n    txt.Size = 18;\n    txt.Bold = true;\n    txt.Color = Colors.Black;\n    txt.Label.Alignment = Alignment.MiddleLeft;\n}\n\nmyPlot.Axes.Margins(right: 1);\nmyPlot.HideGrid();\nmyPlot.Layout.Frameless();\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "LineStyles",
      "anchorUrl": "/cookbook/5.0/Styling#LineStyles",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/LineStyles",
      "imageUrl": "/cookbook/5.0/images/LineStyles.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Scaling",
      "description": "All components of an image can be scaled up or down in size by adjusting the ScaleFactor property. This is very useful for creating images that look nice on high DPI displays with display scaling enabled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.ScaleFactor = 2;\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Scaling",
      "anchorUrl": "/cookbook/5.0/Styling#Scaling",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Scaling",
      "imageUrl": "/cookbook/5.0/images/Scaling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Dark Mode",
      "description": "Plots can be created using dark mode by setting the colors of major plot components to ones consistent with a dark theme.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// set the color palette used when coloring new items added to the plot\nmyPlot.Add.Palette = new ScottPlot.Palettes.Penumbra();\n\n// add things to the plot\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    var sig = myPlot.Add.Signal(Generate.Sin(51, phase: -.05 * i));\n    sig.LineWidth = 3;\n    sig.Label = $\u0022Line {i \u002B 1}\u0022;\n}\nmyPlot.XLabel(\u0022Horizontal Axis\u0022);\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\nmyPlot.Title(\u0022ScottPlot 5 in Dark Mode\u0022);\nmyPlot.ShowLegend();\n\n// change figure colors\nmyPlot.Axes.Color(Color.FromHex(\u0022#d7d7d7\u0022));\nmyPlot.Grid.MajorLineColor = Color.FromHex(\u0022#404040\u0022);\nmyPlot.FigureBackground.Color = Color.FromHex(\u0022#181818\u0022);\nmyPlot.DataBackground.Color = Color.FromHex(\u0022#1f1f1f\u0022);\nmyPlot.Legend.BackgroundFill.Color = Color.FromHex(\u0022#404040\u0022);\nmyPlot.Legend.Font.Color = Color.FromHex(\u0022#d7d7d7\u0022);\nmyPlot.Legend.OutlineStyle.Color = Color.FromHex(\u0022#d7d7d7\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "DarkMode",
      "anchorUrl": "/cookbook/5.0/Styling#DarkMode",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/DarkMode",
      "imageUrl": "/cookbook/5.0/images/DarkMode.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs"
    },
    {
      "chapter": "Miscellaneous",
      "category": "Advanced Styling",
      "name": "Data Area Background Image",
      "description": "An image can be used for the background of the data area.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig1.LineWidth = 3;\nsig2.LineWidth = 3;\n\n// One could load an image from a file...\n// Image bgImage = new(\u0022background.png\u0022);\n\n// But in this example we will use a sample image:\nImage bgImage = SampleImages.ScottPlotLogo();\nmyPlot.DataBackground.Image = bgImage;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedStyling",
      "recipeClassName": "AdvancedStylingDataBackground",
      "anchorUrl": "/cookbook/5.0/AdvancedStyling#AdvancedStylingDataBackground",
      "categoryUrl": "/cookbook/5.0/AdvancedStyling",
      "recipeUrl": "/cookbook/5.0/AdvancedStyling/AdvancedStylingDataBackground",
      "imageUrl": "/cookbook/5.0/images/AdvancedStylingDataBackground.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/AdvancedStyling.cs"
    },
    {
      "chapter": "Miscellaneous",
      "category": "Advanced Styling",
      "name": "Figure Background Image",
      "description": "An image can be used for the background of a figure.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\n\n// One could load an image from a file...\n// Image bgImage = new(\u0022background.png\u0022);\n\n// But in this example we will use a sample image:\nImage bgImage = SampleImages.MonaLisa();\nmyPlot.FigureBackground.Image = bgImage;\n\n// Color the axes and data so they stand out against the dark background\nmyPlot.Axes.Color(Colors.White);\nsig1.Color = sig1.Color.Lighten(.2);\nsig2.Color = sig2.Color.Lighten(.2);\nsig1.LineWidth = 3;\nsig2.LineWidth = 3;\n\n// Shade the data area to make it stand out\nmyPlot.DataBackground.Color = Colors.Black.WithAlpha(.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedStyling",
      "recipeClassName": "AdvancedStylingFigureBackground",
      "anchorUrl": "/cookbook/5.0/AdvancedStyling#AdvancedStylingFigureBackground",
      "categoryUrl": "/cookbook/5.0/AdvancedStyling",
      "recipeUrl": "/cookbook/5.0/AdvancedStyling/AdvancedStylingFigureBackground",
      "imageUrl": "/cookbook/5.0/images/AdvancedStylingFigureBackground.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/AdvancedStyling.cs"
    },
    {
      "chapter": "Miscellaneous",
      "category": "Advanced Styling",
      "name": "Color Interpolation",
      "description": "Colors can be mixed to createa range of colors. This strategy uses linear RGB interpolation.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C= 10; i\u002B\u002B)\n{\n    double fraction = (double)i / 10;\n    double x = i;\n    double y = Math.Sin(Math.PI * 2 * fraction);\n    var circle = myPlot.Add.Circle(x, y, 2);\n    circle.FillColor = Colors.Blue.MixedWith(Colors.Green, fraction);\n    circle.LineColor = Colors.Black.WithAlpha(.5);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AdvancedStyling",
      "recipeClassName": "ColorInterpolation",
      "anchorUrl": "/cookbook/5.0/AdvancedStyling#ColorInterpolation",
      "categoryUrl": "/cookbook/5.0/AdvancedStyling",
      "recipeUrl": "/cookbook/5.0/AdvancedStyling/ColorInterpolation",
      "imageUrl": "/cookbook/5.0/images/ColorInterpolation.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/AdvancedStyling.cs"
    },
    {
      "chapter": "Miscellaneous",
      "category": "Internationalization",
      "name": "Supported Font Detection",
      "description": "ScottPlot comes with font detection methods which help identify the best installed font for displaying text which may contain international characters.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstring chinese = \u0022\u6D4B\u8BD5\u0022;\nmyPlot.Axes.Title.Label.Text = chinese;\nmyPlot.Axes.Title.Label.FontName = Fonts.Detect(chinese);\n\nstring japanese = \u0022\u8A66\u9A13\u0022;\nmyPlot.Axes.Left.Label.Text = japanese;\nmyPlot.Axes.Left.Label.FontName = Fonts.Detect(japanese);\n\nstring korean = \u0022\uD14C\uC2A4\uD2B8\u0022;\nmyPlot.Axes.Bottom.Label.Text = korean;\nmyPlot.Axes.Bottom.Label.FontName = Fonts.Detect(korean);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Internationalization",
      "recipeClassName": "FontDetection",
      "anchorUrl": "/cookbook/5.0/Internationalization#FontDetection",
      "categoryUrl": "/cookbook/5.0/Internationalization",
      "recipeUrl": "/cookbook/5.0/Internationalization/FontDetection",
      "imageUrl": "/cookbook/5.0/images/FontDetection.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Internationalization.cs"
    },
    {
      "chapter": "Miscellaneous",
      "category": "Internationalization",
      "name": "Automatic Font Detection",
      "description": "The Plot\u0027s Style class contains a method which automatically sets the fonts of common plot objects to the font most likely able to display the characters they contain.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\n\nsig1.Label = \u0022\u6D4B\u8BD5\u0022; // Chinese\nsig2.Label = \u0022\uD14C\uC2A4\uD2B8\u0022; // Korean\nmyPlot.ShowLegend();\n\nmyPlot.Title(\u0022\u6D4B\u8BD5\u0022); // Chinese\nmyPlot.YLabel(\u0022\u8A66\u9A13\u0022); // Japanese\nmyPlot.XLabel(\u0022\uD14C\uC2A4\uD2B8\u0022); // Korean\n\nmyPlot.Font.Automatic(); // set font for each item based on its content\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Internationalization",
      "recipeClassName": "AutomaticFontDetection",
      "anchorUrl": "/cookbook/5.0/Internationalization#AutomaticFontDetection",
      "categoryUrl": "/cookbook/5.0/Internationalization",
      "recipeUrl": "/cookbook/5.0/Internationalization/AutomaticFontDetection",
      "imageUrl": "/cookbook/5.0/images/AutomaticFontDetection.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Internationalization.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Annotation",
      "name": "Annotation Quickstart",
      "description": "Annotations are labels you can place on the data area of a plot. Unlike Text added to the plot (which is placed in coordinate units on the axes), Annotations are positioned relative to the data area (in pixel units) and do not move as the plot is panned and zoomed.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Annotation(\u0022This is an Annotation\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationQuickstart",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationQuickstart",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationQuickstart",
      "imageUrl": "/cookbook/5.0/images/AnnotationQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Annotation",
      "name": "Annotation Customization",
      "description": "Annotations can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar anno = myPlot.Add.Annotation(\u0022Customized\\nAnnotation\u0022);\nanno.Label.FontSize = 32;\nanno.Label.FontName = Fonts.Serif;\nanno.Label.BackgroundColor = Colors.RebeccaPurple.WithAlpha(.3);\nanno.Label.ForeColor = Colors.RebeccaPurple;\nanno.Label.BorderColor = Colors.Green;\nanno.Label.BorderWidth = 3;\nanno.OffsetY = 40;\nanno.OffsetX = 20;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationCustomize",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationCustomize",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationCustomize",
      "imageUrl": "/cookbook/5.0/images/AnnotationCustomize.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Annotation",
      "name": "Annotation Positions",
      "description": "Annotations are aligned with the data area.",
      "source": "ScottPlot.Plot myPlot = new();\n\nforeach (Alignment alignment in Enum.GetValues(typeof(Alignment)))\n{\n    myPlot.Add.Annotation(alignment.ToString(), alignment);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationPositions",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationPositions",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationPositions",
      "imageUrl": "/cookbook/5.0/images/AnnotationPositions.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Arrow",
      "name": "Arrow Quickstart",
      "description": "Arrows can be placed on plots to point to a location in coordinate space and extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot some sample data\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\nmyPlot.Add.Signal(sin);\nmyPlot.Add.Signal(cos);\n\n// add arrows using coordinates\nmyPlot.Add.Arrow(27, .2, 25, 0);\n\n// you can define a minimum length so the line persists even when zooming out\nvar arrow2 = myPlot.Add.Arrow(23, -.5, 27, -.25);\narrow2.Color = Colors.Red;\narrow2.MinimumLength = 100;\n\n// the shape of the arrowhead can be adjusted\nvar skinny = myPlot.Add.Arrow(12, .5, 12, 1);\nskinny.Color = Colors.Green;\nskinny.ArrowheadLength = 24;\nskinny.ArrowheadWidth = 8;\n\nvar fat = myPlot.Add.Arrow(20, 1, 20, .6);\nfat.Color = Colors.Blue;\nfat.ArrowheadLength = 24;\nfat.ArrowheadWidth = 36;\nfat.LineWidth = 8;\n\n// offset backs the arrow away from the tip coordinate\nmyPlot.Add.Marker(40, 0.3);\nvar arrow4 = myPlot.Add.Arrow(35, 0.6, 40, 0.3);\narrow4.Color = Colors.Fuchsia;\narrow4.Offset = 10;\narrow4.MinimumLength = 50;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ArrowCoordinated",
      "recipeClassName": "ArrowQuickstart",
      "anchorUrl": "/cookbook/5.0/ArrowCoordinated#ArrowQuickstart",
      "categoryUrl": "/cookbook/5.0/ArrowCoordinated",
      "recipeUrl": "/cookbook/5.0/ArrowCoordinated/ArrowQuickstart",
      "imageUrl": "/cookbook/5.0/images/ArrowQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Arrow.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Lines",
      "name": "Axis Lines",
      "description": "Axis lines are vertical or horizontal lines that span an entire axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.VerticalLine(24);\nmyPlot.Add.HorizontalLine(0.73);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineQuickstart",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineQuickstart",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineQuickstart",
      "imageUrl": "/cookbook/5.0/images/AxisLineQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Lines",
      "name": "Axis Line Label",
      "description": "Axis lines have labels that can be used to display arbitrary text on the axes they are attached to.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// by default labels are drawn on the same side as the axis label\n\nvar axLine1 = myPlot.Add.VerticalLine(24);\naxLine1.Text = \u0022Line 1\u0022;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\naxLine2.Text = \u0022Line 2\u0022;\n\n// labels may be drawn on the side opposite of the axis label\n\nvar axLine3 = myPlot.Add.VerticalLine(37);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.LabelOppositeAxis = true;\n\nvar axLine4 = myPlot.Add.HorizontalLine(-.75);\naxLine4.Text = \u0022Line 4\u0022;\naxLine4.LabelOppositeAxis = true;\n\n// extra padding on the right and top ensures labels have room\nmyPlot.Axes.Right.MinimumSize = 30;\nmyPlot.Axes.Top.MinimumSize = 30;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineLabel",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineLabel",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineLabel",
      "imageUrl": "/cookbook/5.0/images/AxisLineLabel.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Lines",
      "name": "Axis Line Label Positioning",
      "description": "Axis line labels can have custom positioning, including rotation and alignment.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar axLine1 = myPlot.Add.VerticalLine(42);\naxLine1.Text = \u0022Line 1\u0022;\naxLine1.TextRotation = -90;\naxLine1.TextAlignment = Alignment.MiddleRight;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\naxLine2.Text = \u0022Line 2\u0022;\naxLine2.TextRotation = 0;\naxLine2.TextAlignment = Alignment.MiddleRight;\n\nvar axLine3 = myPlot.Add.VerticalLine(20);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.TextRotation = -45;\naxLine3.TextAlignment = Alignment.UpperRight;\n\n// extra padding on the bottom and left for the rotated labels\nmyPlot.Axes.Bottom.MinimumSize = 60;\nmyPlot.Axes.Left.MinimumSize = 60;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineLabelPositioning",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineLabelPositioning",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineLabelPositioning",
      "imageUrl": "/cookbook/5.0/images/AxisLineLabelPositioning.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Lines",
      "name": "Axis Line Style",
      "description": "Axis lines have extensive customization options.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar vl1 = myPlot.Add.VerticalLine(24);\nvl1.LineWidth = 3;\nvl1.Color = Colors.Magenta;\n\nvar hl1 = myPlot.Add.HorizontalLine(0.75);\nhl1.LineWidth = 2;\nhl1.Color = Colors.Green;\nhl1.LinePattern = LinePattern.Dashed;\n\nvar hl2 = myPlot.Add.HorizontalLine(-.23);\nhl2.LineColor = Colors.Navy;\nhl2.LineWidth = 5;\nhl2.Text = \u0022Hello\u0022;\nhl2.TextSize = 24;\nhl2.TextBackgroundColor = Colors.Blue;\nhl2.TextColor = Colors.Yellow;\nhl2.LinePattern = LinePattern.DenselyDashed;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineStyle",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineStyle",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineStyle",
      "imageUrl": "/cookbook/5.0/images/AxisLineStyle.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Lines",
      "name": "Axis Line In Legend",
      "description": "Axis lines will be added to the legend if their Text property is set unless their ExcludeFromLegend property is true.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar axLine1 = myPlot.Add.VerticalLine(24);\naxLine1.Text = \u0022Line 1\u0022;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\n\nvar axLine3 = myPlot.Add.VerticalLine(37);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.ExcludeFromLegend = true;\n\nvar axLine4 = myPlot.Add.HorizontalLine(0.25);\naxLine4.Text = \u0022Line 4\u0022;\n\nvar axLine5 = myPlot.Add.HorizontalLine(-.75);\naxLine5.Text = \u0022Line 5\u0022;\naxLine5.ExcludeFromLegend = true;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineInLegend",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineInLegend",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineInLegend",
      "imageUrl": "/cookbook/5.0/images/AxisLineInLegend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Spans",
      "name": "Axis Span Quickstart",
      "description": "Axis spans label a range of an axis. Vertical spans shade the full width of a vertical range, and horizontal spans shade the full height of a horizontal range.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar hSpan = myPlot.Add.HorizontalSpan(10, 20);\nvar vSpan = myPlot.Add.VerticalSpan(0.25, 0.75);\n\nhSpan.Label.Text = \u0022Horizontal Span\u0022;\nvSpan.Label.Text = \u0022Vertical Span\u0022;\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisSpans",
      "recipeClassName": "AxisSpanQuickstart",
      "anchorUrl": "/cookbook/5.0/AxisSpans#AxisSpanQuickstart",
      "categoryUrl": "/cookbook/5.0/AxisSpans",
      "recipeUrl": "/cookbook/5.0/AxisSpans/AxisSpanQuickstart",
      "imageUrl": "/cookbook/5.0/images/AxisSpanQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisSpans.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Axis Spans",
      "name": "Axis Span Styling",
      "description": "Axis spans can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar hs = myPlot.Add.HorizontalSpan(10, 20);\nhs.Label.Text = \u0022Hello\u0022;\nhs.LineStyle.Width = 2;\nhs.LineStyle.Color = Colors.Magenta;\nhs.LineStyle.Pattern = LinePattern.Dashed;\nhs.FillStyle.Color = Colors.Magenta.WithAlpha(.2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisSpans",
      "recipeClassName": "AxisSpanStyling",
      "anchorUrl": "/cookbook/5.0/AxisSpans#AxisSpanStyling",
      "categoryUrl": "/cookbook/5.0/AxisSpans",
      "recipeUrl": "/cookbook/5.0/AxisSpans/AxisSpanStyling",
      "imageUrl": "/cookbook/5.0/images/AxisSpanStyling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisSpans.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar Plot Quickstart",
      "description": "Bar plots can be added from a series of values.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add bars\ndouble[] values = { 5, 10, 7, 13 };\nmyPlot.Add.Bars(values);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "Quickstart",
      "anchorUrl": "/cookbook/5.0/Bar#Quickstart",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/Quickstart",
      "imageUrl": "/cookbook/5.0/images/Quickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar Plot Legend",
      "description": "A collection of bars can appear in the legend as a single item.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs1 = { 1, 2, 3, 4 };\ndouble[] ys1 = { 5, 10, 7, 13 };\nvar bars1 = myPlot.Add.Bars(xs1, ys1);\nbars1.Label = \u0022Alpha\u0022;\n\ndouble[] xs2 = { 6, 7, 8, 9 };\ndouble[] ys2 = { 7, 12, 9, 15 };\nvar bars2 = myPlot.Add.Bars(xs2, ys2);\nbars2.Label = \u0022Beta\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperLeft);\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarLegend",
      "anchorUrl": "/cookbook/5.0/Bar#BarLegend",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarLegend",
      "imageUrl": "/cookbook/5.0/images/BarLegend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar with Value Labels",
      "description": "Set the \u0060Label\u0060 property of bars to have text displayed above each bar.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 5, 10, 7, 13 };\nvar barPlot = myPlot.Add.Bars(values);\n\n// define the content of labels\nforeach (var bar in barPlot.Bars)\n{\n    bar.Label = bar.Value.ToString();\n}\n\n// customize label style\nbarPlot.ValueLabelStyle.Bold = true;\nbarPlot.ValueLabelStyle.FontSize = 18;\n\nmyPlot.Axes.Margins(bottom: 0, top: .2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarValues",
      "anchorUrl": "/cookbook/5.0/Bar#BarValues",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarValues",
      "imageUrl": "/cookbook/5.0/images/BarValues.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar with Value Labels (horizontal)",
      "description": "Set the \u0060Label\u0060 property of bars to have text displayed beside (left or right) of each bar.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { -5, 10, 7, 13 };\nvar barPlot = myPlot.Add.Bars(values);\n\n// set the label for each bar\nforeach (var bar in barPlot.Bars)\n{\n    bar.Label = bar.Value.ToString();\n}\n\n// customize label style\nbarPlot.ValueLabelStyle.Bold = true;\nbarPlot.ValueLabelStyle.FontSize = 18;\nbarPlot.Horizontal = true;\n\n// add extra margin to account for label\nmyPlot.Axes.Margins(left: .2, right: .2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarValuesHorizontal",
      "anchorUrl": "/cookbook/5.0/Bar#BarValuesHorizontal",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarValuesHorizontal",
      "imageUrl": "/cookbook/5.0/images/BarValuesHorizontal.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar Positioning",
      "description": "The exact position and size of each bar may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, ValueBase = 3, FillColor = Colors.Red },\n    new() { Position = 2, Value = 7, ValueBase = 0, FillColor = Colors.Blue },\n    new() { Position = 4, Value = 3, ValueBase = 2, FillColor = Colors.Green },\n};\n\nmyPlot.Add.Bars(bars);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarPosition",
      "anchorUrl": "/cookbook/5.0/Bar#BarPosition",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarPosition",
      "imageUrl": "/cookbook/5.0/images/BarPosition.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bars with Error",
      "description": "Bars can have errorbars.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, Error = 1, FillColor = Colors.Red },\n    new() { Position = 2, Value = 7, Error = 2, FillColor = Colors.Orange },\n    new() { Position = 3, Value = 6, Error = 1, FillColor = Colors.Green },\n    new() { Position = 4, Value = 8, Error = 2, FillColor = Colors.Blue },\n};\n\nmyPlot.Add.Bars(bars);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarWithError",
      "anchorUrl": "/cookbook/5.0/Bar#BarWithError",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarWithError",
      "imageUrl": "/cookbook/5.0/images/BarWithError.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bars with Labeled Ticks",
      "description": "Bars can be labeled by manually specifying axis tick mark positions and labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Bar(position: 1, value: 5, error: 1);\nmyPlot.Add.Bar(position: 2, value: 7, error: 2);\nmyPlot.Add.Bar(position: 3, value: 6, error: 1);\nmyPlot.Add.Bar(position: 4, value: 8, error: 2);\n\nTick[] ticks =\n{\n    new(1, \u0022Apple\u0022),\n    new(2, \u0022Orange\u0022),\n    new(3, \u0022Pear\u0022),\n    new(4, \u0022Banana\u0022),\n};\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarTickLabels",
      "anchorUrl": "/cookbook/5.0/Bar#BarTickLabels",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarTickLabels",
      "imageUrl": "/cookbook/5.0/images/BarTickLabels.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Stacked Bar Plot",
      "description": "Bars can be positioned on top of each other.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Palettes.Category10 palette = new();\n\nScottPlot.Bar[] bars =\n{\n    // first set of stacked bars\n    new() { Position = 1, ValueBase = 0, Value = 2, FillColor = palette.GetColor(0) },\n    new() { Position = 1, ValueBase = 2, Value = 5, FillColor = palette.GetColor(1) },\n    new() { Position = 1, ValueBase = 5, Value = 10, FillColor = palette.GetColor(2) },\n\n    // second set of stacked bars\n    new() { Position = 2, ValueBase = 0, Value = 4, FillColor = palette.GetColor(0) },\n    new() { Position = 2, ValueBase = 4, Value = 7, FillColor = palette.GetColor(1) },\n    new() { Position = 2, ValueBase = 7, Value = 10, FillColor = palette.GetColor(2) },\n};\n\nmyPlot.Add.Bars(bars);\n\nTick[] ticks =\n{\n    new(1, \u0022Spring\u0022),\n    new(2, \u0022Summer\u0022),\n};\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarStackVertically",
      "anchorUrl": "/cookbook/5.0/Bar#BarStackVertically",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarStackVertically",
      "imageUrl": "/cookbook/5.0/images/BarStackVertically.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Grouped Bar Plot",
      "description": "Bars can be grouped by position and color.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Palettes.Category10 palette = new();\n\nScottPlot.Bar[] bars =\n{\n    // first group\n    new() { Position = 1, Value = 2, FillColor = palette.GetColor(0), Error = 1 },\n    new() { Position = 2, Value = 5, FillColor = palette.GetColor(1), Error = 2 },\n    new() { Position = 3, Value = 7, FillColor = palette.GetColor(2), Error = 1 },\n\n    // second group\n    new() { Position = 5, Value = 4, FillColor = palette.GetColor(0), Error = 2 },\n    new() { Position = 6, Value = 7, FillColor = palette.GetColor(1), Error = 1 },\n    new() { Position = 7, Value = 13, FillColor = palette.GetColor(2), Error = 3 },\n\n    // third group\n    new() { Position = 9, Value = 5, FillColor = palette.GetColor(0), Error = 1 },\n    new() { Position = 10, Value = 6, FillColor = palette.GetColor(1), Error = 3 },\n    new() { Position = 11, Value = 11, FillColor = palette.GetColor(2), Error = 2 },\n};\n\nmyPlot.Add.Bars(bars);\n\n// build the legend manually\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Location = Alignment.UpperLeft;\nmyPlot.Legend.ManualItems.Add(new() { Label = \u0022Monday\u0022, FillColor = palette.GetColor(0) });\nmyPlot.Legend.ManualItems.Add(new() { Label = \u0022Tuesday\u0022, FillColor = palette.GetColor(1) });\nmyPlot.Legend.ManualItems.Add(new() { Label = \u0022Wednesday\u0022, FillColor = palette.GetColor(2) });\n\n// show group labels on the bottom axis\nTick[] ticks =\n{\n    new(2, \u0022Group 1\u0022),\n    new(6, \u0022Group 2\u0022),\n    new(10, \u0022Group 3\u0022),\n};\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "GroupedBarPlot",
      "anchorUrl": "/cookbook/5.0/Bar#GroupedBarPlot",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/GroupedBarPlot",
      "imageUrl": "/cookbook/5.0/images/GroupedBarPlot.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Horizontal Bar Plot",
      "description": "Bar plots can be displayed horizontally.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, Error = 1, },\n    new() { Position = 2, Value = 7, Error = 2, },\n    new() { Position = 3, Value = 6, Error = 1, },\n    new() { Position = 4, Value = 8, Error = 2, },\n};\n\nvar barPlot = myPlot.Add.Bars(bars);\nbarPlot.Horizontal = true;\n\nmyPlot.Axes.Margins(left: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "HorizontalBar",
      "anchorUrl": "/cookbook/5.0/Bar#HorizontalBar",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/HorizontalBar",
      "imageUrl": "/cookbook/5.0/images/HorizontalBar.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Stacked Bar Chart",
      "description": "Bars can be stacked to present data in groups.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstring[] categoryNames = { \u0022Phones\u0022, \u0022Computers\u0022, \u0022Tablets\u0022 };\nColor[] categoryColors = { Colors.C0, Colors.C1, Colors.C2 };\n\nfor (int x = 0; x \u003C 4; x\u002B\u002B)\n{\n    double[] values = Generate.RandomSample(categoryNames.Length, 1000, 5000);\n\n    double nextBarBase = 0;\n\n    for (int i = 0; i \u003C values.Length; i\u002B\u002B)\n    {\n        ScottPlot.Bar bar = new()\n        {\n            Value = nextBarBase \u002B values[i],\n            FillColor = categoryColors[i],\n            ValueBase = nextBarBase,\n            Position = x,\n        };\n\n        myPlot.Add.Bar(bar);\n\n        nextBarBase \u002B= values[i];\n    }\n}\n\n// use custom tick labels on the bottom\nScottPlot.TickGenerators.NumericManual tickGen = new();\nfor (int x = 0; x \u003C 4; x\u002B\u002B)\n{\n    tickGen.AddMajor(x, $\u0022Q{x \u002B 1}\u0022);\n}\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\n// display groups in the legend\nfor (int i = 0; i \u003C 3; i\u002B\u002B)\n{\n    LegendItem item = new()\n    {\n        Label = categoryNames[i],\n        FillColor = categoryColors[i]\n    };\n    myPlot.Legend.ManualItems.Add(item);\n}\nmyPlot.Legend.Orientation = Orientation.Horizontal;\nmyPlot.ShowLegend(Alignment.UpperRight);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0, top: .3);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "StackedBars",
      "anchorUrl": "/cookbook/5.0/Bar#StackedBars",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/StackedBars",
      "imageUrl": "/cookbook/5.0/images/StackedBars.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Box Plot Quickstart",
      "description": "Box plots can be created individually and added to the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Box box = new()\n{\n    Position = 5,\n    BoxMin = 81,\n    BoxMax = 93,\n    WhiskerMin = 76,\n    WhiskerMax = 107,\n    BoxMiddle = 84,\n};\n\nmyPlot.Add.Box(box);\n\nmyPlot.Axes.SetLimits(0, 10, 70, 110);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Box",
      "recipeClassName": "BoxPlotQuickstart",
      "anchorUrl": "/cookbook/5.0/Box#BoxPlotQuickstart",
      "categoryUrl": "/cookbook/5.0/Box",
      "recipeUrl": "/cookbook/5.0/Box/BoxPlotQuickstart",
      "imageUrl": "/cookbook/5.0/images/BoxPlotQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Box Plot Groups",
      "description": "Each collection of boxes added to the plot gets styled the same and appears as a single item in the legend. Add multiple bar series plots with defined X positions to give the appearance of grouped data.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CScottPlot.Box\u003E boxes1 = new() {\n    Generate.RandomBox(1),\n    Generate.RandomBox(2),\n    Generate.RandomBox(3),\n};\n\nList\u003CScottPlot.Box\u003E boxes2 = new() {\n    Generate.RandomBox(5),\n    Generate.RandomBox(6),\n    Generate.RandomBox(7),\n};\n\nvar bp1 = myPlot.Add.Boxes(boxes1);\nbp1.Label = \u0022Group 1\u0022;\n\nvar bp2 = myPlot.Add.Boxes(boxes2);\nbp2.Label = \u0022Group 2\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Box",
      "recipeClassName": "BoxPlotGroups",
      "anchorUrl": "/cookbook/5.0/Box#BoxPlotGroups",
      "categoryUrl": "/cookbook/5.0/Box",
      "recipeUrl": "/cookbook/5.0/Box/BoxPlotGroups",
      "imageUrl": "/cookbook/5.0/images/BoxPlotGroups.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Callout",
      "name": "Callout Quickstart",
      "description": "Callouts display a label and are connected with an arrow that marks a point on the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(15);\ndouble[] ys = Generate.Sin(15);\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.Add.Callout(\u0022Hello\u0022,\n    textLocation: new(7.5, .8),\n    tipLocation: new(xs[6], ys[6]));\n\nmyPlot.Add.Callout(\u0022World\u0022,\n    textLocation: new(10, 0),\n    tipLocation: new(xs[13], ys[13]));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Callout",
      "recipeClassName": "CalloutQuickstart",
      "anchorUrl": "/cookbook/5.0/Callout#CalloutQuickstart",
      "categoryUrl": "/cookbook/5.0/Callout",
      "recipeUrl": "/cookbook/5.0/Callout/CalloutQuickstart",
      "imageUrl": "/cookbook/5.0/images/CalloutQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Callout.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Ellipse",
      "name": "Ellipse Quickstart",
      "description": "Ellipses can be added to plots",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Ellipse(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radiusX: rand.Next(1, 7),\n        radiusY: rand.Next(1, 7));\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "PlotEllipseQuickstart",
      "anchorUrl": "/cookbook/5.0/Ellipse#PlotEllipseQuickstart",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/PlotEllipseQuickstart",
      "imageUrl": "/cookbook/5.0/images/PlotEllipseQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Ellipse",
      "name": "Circle Quickstart",
      "description": "Circles can be added to plots. Circles are really Ellipses with the same X and Y radius. Note that circles appear as ellipses unless the plot has a square coordinate system.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Circle(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radius: rand.Next(1, 7));\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "PlotCircleQuickstart",
      "anchorUrl": "/cookbook/5.0/Ellipse#PlotCircleQuickstart",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/PlotCircleQuickstart",
      "imageUrl": "/cookbook/5.0/images/PlotCircleQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Ellipse",
      "name": "Circle with Locked Scale",
      "description": "For circles to always appear circular, the coordinate system must be forced to always display square-shaped pixels. This can be achieved by enabling the axis scale lock.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Circle(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radius: rand.Next(1, 7));\n}\n\n// force pixels to have a 1:1 scale ratio\nmyPlot.Axes.SquareUnits();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "CircleWithLockedScale",
      "anchorUrl": "/cookbook/5.0/Ellipse#CircleWithLockedScale",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/CircleWithLockedScale",
      "imageUrl": "/cookbook/5.0/images/CircleWithLockedScale.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Ellipse",
      "name": "Ellipse Styling",
      "description": "Ellipses styles can be extensively customized",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar circle = myPlot.Add.Circle(center: Coordinates.Origin, radius: 5);\ncircle.LineStyle.Width = 5;\ncircle.LineStyle.Pattern = LinePattern.Dashed;\ncircle.LineStyle.Color = Colors.Green;\ncircle.FillStyle.Color = Colors.Navy;\ncircle.FillStyle.HatchColor = Colors.Red;\ncircle.FillStyle.Hatch = new ScottPlot.Hatches.Striped();\n\nmyPlot.Axes.SetLimits(-10, 10, -10, 10);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "EllipseStyling",
      "anchorUrl": "/cookbook/5.0/Ellipse#EllipseStyling",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/EllipseStyling",
      "imageUrl": "/cookbook/5.0/images/EllipseStyling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Ellipse",
      "name": "Ellipse Rotation",
      "description": "Ellipses can also be rotated",
      "source": "ScottPlot.Plot myPlot = new();\n\nint count = 5;\nfor (int i = 0; i \u003C count; i\u002B\u002B)\n{\n    var el = myPlot.Add.Ellipse(\n        center: Coordinates.Origin,\n        radiusX: 1,\n        radiusY: 5);\n\n    el.Rotation = i * 180.0 / count;\n}\n\n// force pixels to have a 1:1 scale ratio\nScottPlot.AxisRules.SquareZoomOut rule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(rule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "EllipseRotation",
      "anchorUrl": "/cookbook/5.0/Ellipse#EllipseRotation",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/EllipseRotation",
      "imageUrl": "/cookbook/5.0/images/EllipseRotation.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Error Bars",
      "name": "Error Bar Quickstart",
      "description": "Error Bars go well with scatter plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint points = 30;\n\ndouble[] xs = Generate.Consecutive(points);\ndouble[] ys = Generate.RandomWalk(points);\ndouble[] err = Generate.RandomSample(points, 0.1, 1);\n\nvar scatter = myPlot.Add.Scatter(xs, ys);\nvar errorbars = myPlot.Add.ErrorBar(xs, ys, err);\nerrorbars.Color = scatter.Color;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ErrorBar",
      "recipeClassName": "ErrorBarQuickstart",
      "anchorUrl": "/cookbook/5.0/ErrorBar#ErrorBarQuickstart",
      "categoryUrl": "/cookbook/5.0/ErrorBar",
      "recipeUrl": "/cookbook/5.0/ErrorBar/ErrorBarQuickstart",
      "imageUrl": "/cookbook/5.0/images/ErrorBarQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Error Bars",
      "name": "ErrorBar Values",
      "description": "Error size can be set for all dimensions.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint points = 10;\n\ndouble[] xs = Generate.Consecutive(points);\ndouble[] ys = Generate.RandomWalk(points);\nvar scatter = myPlot.Add.Scatter(xs, ys);\nscatter.LineStyle.Width = 0;\n\nScottPlot.Plottables.ErrorBar eb = new(\n    xs: xs,\n    ys: ys,\n    xErrorsNegative: Generate.RandomSample(points, .5),\n    xErrorsPositive: Generate.RandomSample(points, .5),\n    yErrorsNegative: Generate.RandomSample(points),\n    yErrorsPositive: Generate.RandomSample(points));\n\neb.Color = scatter.Color;\n\nmyPlot.Add.Plottable(eb);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ErrorBar",
      "recipeClassName": "CustomErrors",
      "anchorUrl": "/cookbook/5.0/ErrorBar#CustomErrors",
      "categoryUrl": "/cookbook/5.0/ErrorBar",
      "recipeUrl": "/cookbook/5.0/ErrorBar/CustomErrors",
      "imageUrl": "/cookbook/5.0/images/CustomErrors.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY From Array Data",
      "description": "FillY plots can be created from X, Y1, and Y2 arrays.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandomDataGenerator dataGen = new(0);\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\n\nvar xyy = myPlot.Add.FillY(xs, ys1, ys2);\nxyy.FillStyle.Color = Colors.Magenta.WithAlpha(100);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromArrays",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromArrays",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromArrays",
      "imageUrl": "/cookbook/5.0/images/FillYFromArrays.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY From Scatter Plots",
      "description": "FillY plots can be created from two scatter plots that share the same X values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandomDataGenerator dataGen = new(0);\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\n\nvar scatter1 = myPlot.Add.Scatter(xs, ys1);\nvar scatter2 = myPlot.Add.Scatter(xs, ys2);\n\nvar xyy = myPlot.Add.FillY(scatter1, scatter2);\nxyy.FillStyle.Color = Colors.Blue.WithAlpha(100);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromScatters",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromScatters",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromScatters",
      "imageUrl": "/cookbook/5.0/images/FillYFromScatters.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY with Custom Type",
      "description": "FillY plots can be created from data of any type if a conversion function is supplied.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create source data in a nonstandard data type\nList\u003C(int, int, int)\u003E data = new();\nRandom rand = new(0);\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    int x = i;\n    int y1 = rand.Next(0, 10);\n    int y2 = rand.Next(20, 30);\n    data.Add((x, y1, y2));\n}\n\n// create a custom converter for the source data type\nstatic (double, double, double) MyConverter((int, int, int) s) =\u003E (s.Item1, s.Item2, s.Item3);\n\n// create a filled plot from source data using the custom converter\nmyPlot.Add.FillY(data, MyConverter);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "Function",
      "anchorUrl": "/cookbook/5.0/FillY#Function",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/Function",
      "imageUrl": "/cookbook/5.0/images/Function.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY Plot Styling",
      "description": "FillY plots can be customized using public properties.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandomDataGenerator dataGen = new(0);\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\n\nvar xyy = myPlot.Add.FillY(xs, ys1, ys2);\nxyy.FillStyle.Color = Colors.OrangeRed.WithAlpha(100);\n\nxyy.MarkerStyle.IsVisible = true;\nxyy.MarkerStyle.Shape = MarkerShape.OpenSquare;\nxyy.MarkerStyle.Size = 8;\n\nxyy.LineStyle.AntiAlias = true;\nxyy.LineStyle.Color = Colors.DarkBlue;\nxyy.LineStyle.Pattern = LinePattern.Dotted;\nxyy.LineStyle.Width = 2;\nxyy.Label = \u0022xyy\u0022;\n\nmyPlot.Legend.IsVisible = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "Styling",
      "anchorUrl": "/cookbook/5.0/FillY#Styling",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/Styling",
      "imageUrl": "/cookbook/5.0/images/Styling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Candlestick Chart",
      "description": "Candlestick charts use symbols to display price data. The rectangle indicates open and close prices, and the center line indicates minimum and maximum price for the given time period. Color indicates whether the price increased or decreased between open and close.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar prices = Generate.RandomOHLCs(30);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "Candlestick",
      "anchorUrl": "/cookbook/5.0/Finance#Candlestick",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/Candlestick",
      "imageUrl": "/cookbook/5.0/images/Candlestick.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "OHLC Chart",
      "description": "OHLC charts use symbols to display price data (open, high, low, and close) for specific time ranges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar prices = Generate.RandomOHLCs(30);\nmyPlot.Add.OHLC(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "OhlcChart",
      "anchorUrl": "/cookbook/5.0/Finance#OhlcChart",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/OhlcChart",
      "imageUrl": "/cookbook/5.0/images/OhlcChart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Finance Chart with Custom Time Bins",
      "description": "Finance charts can display price range information over arbitrary time scales.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime timeOpen = new(1985, 09, 24, 9, 30, 0); // 9:30 AM\nDateTime timeClose = new(1985, 09, 24, 16, 0, 0); // 4:00 PM\nTimeSpan timeSpan = TimeSpan.FromMinutes(10); // 10 minute bins\n\nList\u003COHLC\u003E prices = new();\nfor (DateTime dt = timeOpen; dt \u003C= timeClose; dt \u002B= timeSpan)\n{\n    double open = Generate.RandomNumber(20, 40) \u002B prices.Count;\n    double close = Generate.RandomNumber(20, 40) \u002B prices.Count;\n    double high = Math.Max(open, close) \u002B Generate.RandomNumber(5);\n    double low = Math.Min(open, close) - Generate.RandomNumber(5);\n    prices.Add(new OHLC(open, high, low, close, dt, timeSpan));\n}\n\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceChartBins",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceChartBins",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceChartBins",
      "imageUrl": "/cookbook/5.0/images/FinanceChartBins.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Price on Right",
      "description": "Finance charts can be created which display price information on the right axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add candlesticks to the plot\nvar prices = Generate.RandomOHLCs(30);\nvar candles = myPlot.Add.Candlestick(prices);\n\n// configure the candlesticks to use the plot\u0027s right axis\ncandles.Axes.YAxis = myPlot.Axes.Right;\ncandles.Axes.YAxis.Label.Text = \u0022Price\u0022;\n\n// style the bottom axis to display date\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceRightAxis",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceRightAxis",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceRightAxis",
      "imageUrl": "/cookbook/5.0/images/FinanceRightAxis.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Simple Moving Average",
      "description": "Tools exist for creating simple moving average (SMA) curves and displaying them next to finanial data.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate and plot time series price data\nvar prices = Generate.RandomOHLCs(75);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// calculate SMA and display it as a scatter plot\nint[] windowSizes = { 3, 8, 20 };\nforeach (int windowSize in windowSizes)\n{\n    ScottPlot.Finance.SimpleMovingAverage sma = new(prices, windowSize);\n    var sp = myPlot.Add.Scatter(sma.Dates, sma.Means);\n    sp.Label = $\u0022SMA {windowSize}\u0022;\n    sp.MarkerSize = 0;\n    sp.LineWidth = 3;\n    sp.Color = Colors.Navy.WithAlpha(1 - windowSize / 30.0);\n}\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceSma",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceSma",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceSma",
      "imageUrl": "/cookbook/5.0/images/FinanceSma.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Bollinger Bands",
      "description": "Tools exist for creating Bollinger Bands which display weighted moving mean and variance for time series financial data.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate and plot time series price data\nvar prices = Generate.RandomOHLCs(100);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// calculate Bollinger Bands\nScottPlot.Finance.BollingerBands bb = new(prices, 20);\n\n// display center line (mean) as a solid line\nvar sp1 = myPlot.Add.Scatter(bb.Dates, bb.Means);\nsp1.MarkerSize = 0;\nsp1.Color = Colors.Navy;\n\n// display upper bands (positive variance) as a dashed line\nvar sp2 = myPlot.Add.Scatter(bb.Dates, bb.UpperValues);\nsp2.MarkerSize = 0;\nsp2.Color = Colors.Navy;\nsp2.LinePattern = LinePattern.Dotted;\n\n// display lower bands (positive variance) as a dashed line\nvar sp3 = myPlot.Add.Scatter(bb.Dates, bb.LowerValues);\nsp3.MarkerSize = 0;\nsp3.Color = Colors.Navy;\nsp3.LinePattern = LinePattern.Dotted;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceBollinger",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceBollinger",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceBollinger",
      "imageUrl": "/cookbook/5.0/images/FinanceBollinger.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Candlestick Chart Without Gaps",
      "description": "When the DateTimes stored in OHLC objects are used to determine the horizontal position of candlesticks, periods without data like weekends and holidays appear as gaps in the plot. Enabling sequential mode causes the plot to ignore the OHLC DateTimes and display candles at integer positions starting from zero. Users can customize the tick generator to display dates instead of numbers on the horizontal axis if desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a candlestick plot\nvar prices = Generate.RandomOHLCs(31);\nvar candlePlot = myPlot.Add.Candlestick(prices);\n\n// enable sequential mode to place candles at X = 0, 1, 2, ...\ncandlePlot.Sequential = true;\n\n// determine a few candles to display ticks for\nint tickCount = 5;\nint tickDelta = prices.Count / tickCount;\nDateTime[] tickDates = prices\n    .Where((x, i) =\u003E i % tickDelta == 0)\n    .Select(x =\u003E x.DateTime)\n    .ToArray();\n\n// By default, horizontal tick labels will be numbers (1, 2, 3...)\n// We can use a manual tick generator to display dates on the horizontal axis\ndouble[] tickPositions = Generate.Consecutive(tickDates.Length, tickDelta);\nstring[] tickLabels = tickDates.Select(x =\u003E x.ToString(\u0022MM/dd\u0022)).ToArray();\nScottPlot.TickGenerators.NumericManual tickGen = new(tickPositions, tickLabels);\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinancialPlotWithoutGaps",
      "anchorUrl": "/cookbook/5.0/Finance#FinancialPlotWithoutGaps",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinancialPlotWithoutGaps",
      "imageUrl": "/cookbook/5.0/images/FinancialPlotWithoutGaps.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "OHLC Chart Without Gaps",
      "description": "When the DateTimes stored in OHLC objects are used to determine the horizontal position, periods without data like weekends and holidays appear as gaps in the plot. Enabling sequential mode causes the plot to ignore the OHLC DateTimes and place OHLCs at integer positions starting from zero. Users can customize the tick generator to display dates instead of numbers on the horizontal axis if desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a OHLC plot\nvar prices = Generate.RandomOHLCs(31);\nvar ohlcPlot = myPlot.Add.OHLC(prices);\n\n// enable sequential mode to place OHLCs at X = 0, 1, 2, ...\nohlcPlot.Sequential = true;\n\n// determine a few OHLCs to display ticks for\nint tickCount = 5;\nint tickDelta = prices.Count / tickCount;\nDateTime[] tickDates = prices\n    .Where((x, i) =\u003E i % tickDelta == 0)\n    .Select(x =\u003E x.DateTime)\n    .ToArray();\n\n// By default, horizontal tick labels will be numbers (1, 2, 3...)\n// We can use a manual tick generator to display dates on the horizontal axis\ndouble[] tickPositions = Generate.Consecutive(tickDates.Length, tickDelta);\nstring[] tickLabels = tickDates.Select(x =\u003E x.ToString(\u0022MM/dd\u0022)).ToArray();\nScottPlot.TickGenerators.NumericManual tickGen = new(tickPositions, tickLabels);\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinancialPlotWithoutGapsOhlc",
      "anchorUrl": "/cookbook/5.0/Finance#FinancialPlotWithoutGapsOhlc",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinancialPlotWithoutGapsOhlc",
      "imageUrl": "/cookbook/5.0/images/FinancialPlotWithoutGapsOhlc.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Function",
      "name": "Function Quickstart",
      "description": "Create a function plot from a formula.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Functions are defined as delegates with an input and output\nstatic double func1(double x) =\u003E (Math.Sin(x) * Math.Sin(x / 2));\nstatic double func2(double x) =\u003E (Math.Sin(x) * Math.Sin(x / 3));\nstatic double func3(double x) =\u003E (Math.Cos(x) * Math.Sin(x / 5));\n\n// Add functions to the plot\nmyPlot.Add.Function(func1);\nmyPlot.Add.Function(func2);\nmyPlot.Add.Function(func3);\n\n// Manually set axis limits because functions do not have discrete data points\nmyPlot.Axes.SetLimits(-10, 10, -1.5, 1.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Function",
      "recipeClassName": "FunctionQuickstart",
      "anchorUrl": "/cookbook/5.0/Function#FunctionQuickstart",
      "categoryUrl": "/cookbook/5.0/Function",
      "recipeUrl": "/cookbook/5.0/Function/FunctionQuickstart",
      "imageUrl": "/cookbook/5.0/images/FunctionQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Function.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Function",
      "name": "Function Limit X",
      "description": "A function can be limited to a range of X values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar func = new Func\u003Cdouble, double\u003E((x) =\u003E Math.Sin(x) * Math.Sin(x / 2));\n\nvar f = myPlot.Add.Function(func);\nf.MinX = -3;\nf.MaxX = 3;\n\nmyPlot.Axes.SetLimits(-5, 5, -.2, 1.0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Function",
      "recipeClassName": "FunctionLimitX",
      "anchorUrl": "/cookbook/5.0/Function#FunctionLimitX",
      "categoryUrl": "/cookbook/5.0/Function",
      "recipeUrl": "/cookbook/5.0/Function/FunctionLimitX",
      "imageUrl": "/cookbook/5.0/images/FunctionLimitX.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Function.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Heatmap Quickstart",
      "description": "Heatmaps can be created from 2D arrays",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\nmyPlot.Add.Heatmap(data);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapQuickstart",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapQuickstart",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapQuickstart",
      "imageUrl": "/cookbook/5.0/images/HeatmapQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Inverted Heatmap",
      "description": "Heatmaps can be inverted by reversing the order of colors in the colormap",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Colormap = new ScottPlot.Colormaps.Viridis();\nhm1.Position = new(0, 65, 0, 100);\n\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Colormap = new ScottPlot.Colormaps.Viridis().Reversed();\nhm2.Position = new(100, 165, 0, 100);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapInverted",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapInverted",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapInverted",
      "imageUrl": "/cookbook/5.0/images/HeatmapInverted.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Heatmap with custom Colormap",
      "description": "A heatmap\u0027s Colormap is the logic used to convert from cell value to cell color and they can set by the user. ScottPlot comes with many common colormaps, but users may implement IColormap and apply their own. A colorbar can be added to indicate which colors map to which values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Colormap = new ScottPlot.Colormaps.Turbo();\n\nmyPlot.Add.ColorBar(hm1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapColormap",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapColormap",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapColormap",
      "imageUrl": "/cookbook/5.0/images/HeatmapColormap.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Multiple Colorbars",
      "description": "Multiple colorbars may be added to plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Extent = new(0, 1, 0, 1);\nhm1.Colormap = new ScottPlot.Colormaps.Turbo();\nmyPlot.Add.ColorBar(hm1);\n\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Extent = new(1.5, 2.5, 0, 1);\nhm2.Colormap = new ScottPlot.Colormaps.Viridis();\nmyPlot.Add.ColorBar(hm2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapMultipleColorbar",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapMultipleColorbar",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapMultipleColorbar",
      "imageUrl": "/cookbook/5.0/images/HeatmapMultipleColorbar.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Colorbar Title",
      "description": "A colorbar displays a colormap on an edge of the plot, and it has an optional label which can be customized to display a title.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm = myPlot.Add.Heatmap(data);\nhm.Colormap = new ScottPlot.Colormaps.Turbo();\n\nvar cb = myPlot.Add.ColorBar(hm);\ncb.Label = \u0022Intensity\u0022;\ncb.LabelStyle.FontSize = 24;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "ColorbarTitle",
      "anchorUrl": "/cookbook/5.0/Heatmap#ColorbarTitle",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/ColorbarTitle",
      "imageUrl": "/cookbook/5.0/images/ColorbarTitle.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Flipped Heatmap",
      "description": "Heatmaps can be flipped horizontally and/or vertically",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nmyPlot.Add.Text(\u0022default\u0022, 0, 1.5);\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new CoordinateRect(0, 1, 0, 1);\n\nmyPlot.Add.Text(\u0022flip X\u0022, 2, 1.5);\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new CoordinateRect(2, 3, 0, 1);\nhm2.FlipHorizontally = true;\n\nmyPlot.Add.Text(\u0022flip Y\u0022, 4, 1.5);\nvar hm3 = myPlot.Add.Heatmap(data);\nhm3.Position = new CoordinateRect(4, 5, 0, 1);\nhm3.FlipVertically = true;\n\nmyPlot.Add.Text(\u0022flip X\u0026Y\u0022, 6, 1.5);\nvar hm4 = myPlot.Add.Heatmap(data);\nhm4.Position = new CoordinateRect(6, 7, 0, 1);\nhm4.FlipHorizontally = true;\nhm4.FlipVertically = true;\n\nmyPlot.Axes.SetLimits(-.5, 7.5, -1, 2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapFlip",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapFlip",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapFlip",
      "imageUrl": "/cookbook/5.0/images/HeatmapFlip.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Smooth Heatmap",
      "description": "Enable the \u0060Smooth\u0060 property for anti-aliased rendering",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nmyPlot.Add.Text(\u0022Smooth = false\u0022, 0, 1.1);\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new CoordinateRect(0, 1, 0, 1);\n\nmyPlot.Add.Text(\u0022Smooth = true\u0022, 1.1, 1.1);\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new CoordinateRect(1.1, 2.1, 0, 1);\nhm2.Smooth = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapSmooth",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapSmooth",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapSmooth",
      "imageUrl": "/cookbook/5.0/images/HeatmapSmooth.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Transparent Cells",
      "description": "Assign double.NaN to a heatmap cell to make it transparent.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// start with 2D data and set some cells to NaN\ndouble[,] data = SampleData.MonaLisa();\nfor (int y = 20; y \u003C 80; y\u002B\u002B)\n{\n    for (int x = 20; x \u003C 60; x\u002B\u002B)\n    {\n        data[y, x] = double.NaN;\n    }\n}\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new(10, 35, -1.5, .5);\n\n// the NaN transparency color can be customized\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new(40, 55, -.5, .75);\nhm2.NaNCellColor = Colors.Magenta.WithAlpha(.4);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapTransparentCells",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapTransparentCells",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapTransparentCells",
      "imageUrl": "/cookbook/5.0/images/HeatmapTransparentCells.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Global Transparency",
      "description": "The transparency of the entire heatmap can be adjusted.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm = myPlot.Add.Heatmap(data);\nhm.Position = new(10, 35, -1.5, .5);\nhm.Opacity = 0.5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapGlobalTransparency",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapGlobalTransparency",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapGlobalTransparency",
      "imageUrl": "/cookbook/5.0/images/HeatmapGlobalTransparency.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Heatmap",
      "name": "Alpha Map",
      "description": "An alpha map (a 2d array of byte values) can be used to apply custom transparency to each cell of a heatmap.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// data values are translated to color based on the heatmap\u0027s colormap\ndouble[,] data = SampleData.MonaLisa();\n\n// an alpha map controls transparency of each cell\nbyte[,] alphaMap = new byte[data.GetLength(0), data.GetLength(1)];\n\n// fill the alpha map with values from 0 (transparent) to 255 (opaque)\nfor (int y = 0; y \u003C alphaMap.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C alphaMap.GetLength(1); x\u002B\u002B)\n    {\n        double fractionAcross = (double)x / alphaMap.GetLength(1);\n        alphaMap[y, x] = (byte)(fractionAcross * 255);\n    }\n}\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm = myPlot.Add.Heatmap(data);\nhm.Position = new(10, 35, -1.5, .5);\nhm.AlphaMap = alphaMap;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapAlphaMap",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapAlphaMap",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapAlphaMap",
      "imageUrl": "/cookbook/5.0/images/HeatmapAlphaMap.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Line Plot",
      "name": "Line Plot Quickstart",
      "description": "Line plots are placed with a start and end location in coordinate space. Their styles can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Line(1, 12, 12, 0);\nmyPlot.Add.Line(7, 9, 42, 9);\nmyPlot.Add.Line(30, 17, 30, 1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LineQuickStart",
      "anchorUrl": "/cookbook/5.0/LinePlot#LineQuickStart",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LineQuickStart",
      "imageUrl": "/cookbook/5.0/images/LineQuickStart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Line Plot",
      "name": "Line Plot Shapes",
      "description": "Line plots can be styled using a LineStyle.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Colormaps.Viridis colormap = new();\n\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    // add a line\n    Coordinates start = Generate.RandomCoordinates();\n    Coordinates end = Generate.RandomCoordinates();\n    var line = myPlot.Add.Line(start, end);\n\n    // customize the line\n    line.LineColor = Generate.RandomColor(colormap);\n    line.LineWidth = Generate.RandomInteger(1, 4);\n    line.LinePattern = Generate.RandomLinePattern();\n\n    // customize markers\n    line.MarkerColor = line.LineStyle.Color;\n    line.MarkerShape = Generate.RandomMarkerShape();\n    line.MarkerSize = Generate.RandomInteger(5, 15);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LinePlotStyles",
      "anchorUrl": "/cookbook/5.0/LinePlot#LinePlotStyles",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LinePlotStyles",
      "imageUrl": "/cookbook/5.0/images/LinePlotStyles.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Line Plot",
      "name": "Line Plot Legend",
      "description": "Line plots with labels appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sin = myPlot.Add.Signal(Generate.Sin());\nsin.Label = \u0022Sine\u0022;\n\nvar cos = myPlot.Add.Signal(Generate.Cos());\ncos.Label = \u0022Cosine\u0022;\n\nvar line = myPlot.Add.Line(1, 12, 12, 0);\nline.LineWidth = 3;\nline.MarkerSize = 10;\nline.Label = \u0022Line Plot\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LinePlotLegendQWER",
      "anchorUrl": "/cookbook/5.0/LinePlot#LinePlotLegendQWER",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LinePlotLegendQWER",
      "imageUrl": "/cookbook/5.0/images/LinePlotLegendQWER.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Marker",
      "name": "Marker Quickstart",
      "description": "Markers are symbols placed at a location in coordinate space. Their shape, size, and color can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Marker(25, .5);\nmyPlot.Add.Marker(35, .6);\nmyPlot.Add.Marker(45, .7);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerQuickstart",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerQuickstart",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerQuickstart",
      "imageUrl": "/cookbook/5.0/images/MarkerQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Marker",
      "name": "Marker Shapes",
      "description": "Many marker shapes are available.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Colormaps.Turbo colormap = new();\n\nfor (int i = 0; i \u003C 100; i\u002B\u002B)\n{\n    MarkerShape shape = Generate.RandomMarkerShape();\n    Coordinates location = Generate.RandomCoordinates();\n    float size = Generate.RandomInteger(5, 10);\n    Color color = Generate.RandomColor(colormap);\n\n    myPlot.Add.Marker(location, shape, size, color);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerShapes",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerShapes",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerShapes",
      "imageUrl": "/cookbook/5.0/images/MarkerShapes.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Marker",
      "name": "Marker Legend",
      "description": "Markers with labels appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sin = myPlot.Add.Signal(Generate.Sin());\nsin.Label = \u0022Sine\u0022;\n\nvar cos = myPlot.Add.Signal(Generate.Cos());\ncos.Label = \u0022Cosine\u0022;\n\nvar marker = myPlot.Add.Marker(25, .5);\nmarker.Label = \u0022Marker\u0022;\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerLegend",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerLegend",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerLegend",
      "imageUrl": "/cookbook/5.0/images/MarkerLegend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Marker",
      "name": "Many Markers",
      "description": "Collections of markers that are all styled the same may be added to the plot",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.Markers(xs, sin, MarkerShape.OpenCircle, 15, Colors.Green);\nmyPlot.Add.Markers(xs, cos, MarkerShape.FilledDiamond, 10, Colors.Magenta);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkersPlot",
      "anchorUrl": "/cookbook/5.0/Marker#MarkersPlot",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkersPlot",
      "imageUrl": "/cookbook/5.0/images/MarkersPlot.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Pie",
      "name": "Pie Chart from Values",
      "description": "A pie chart can be created from a few values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 5, 2, 8, 4, 8 };\nvar pie = myPlot.Add.Pie(values);\npie.ExplodeFraction = .1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieQuickstart",
      "anchorUrl": "/cookbook/5.0/Pie#PieQuickstart",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieQuickstart",
      "imageUrl": "/cookbook/5.0/images/PieQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Pie",
      "name": "Pie Chart from Slices",
      "description": "A pie chart can be created from a collection of slices.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CPieSlice\u003E slices = new()\n{\n    new PieSlice() { Value = 5, FillColor = Colors.Red, Label = \u0022Red\u0022 },\n    new PieSlice() { Value = 2, FillColor = Colors.Orange, Label = \u0022Orange\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Gold, Label = \u0022Yellow\u0022 },\n    new PieSlice() { Value = 4, FillColor = Colors.Green, Label = \u0022Green\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Blue, Label = \u0022Blue\u0022 },\n};\n\nvar pie = myPlot.Add.Pie(slices);\npie.ExplodeFraction = .1;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSlices",
      "anchorUrl": "/cookbook/5.0/Pie#PieSlices",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSlices",
      "imageUrl": "/cookbook/5.0/images/PieSlices.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Pie",
      "name": "Donut from Slices",
      "description": "A donut chart is a pie chart with an open center. Donut charts can be created from a collection of slices.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CPieSlice\u003E slices = new()\n{\n    new PieSlice() { Value = 5, FillColor = Colors.Red, Label = \u0022Red\u0022 },\n    new PieSlice() { Value = 2, FillColor = Colors.Orange, Label = \u0022Orange\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Gold, Label = \u0022Yellow\u0022 },\n    new PieSlice() { Value = 4, FillColor = Colors.Green, Label = \u0022Green\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Blue, Label = \u0022Blue\u0022 },\n};\n\nvar pie = myPlot.Add.Pie(slices);\npie.DonutFraction = .5;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieDonut",
      "anchorUrl": "/cookbook/5.0/Pie#PieDonut",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieDonut",
      "imageUrl": "/cookbook/5.0/images/PieDonut.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Pie",
      "name": "Pie Slice Labels",
      "description": "Slice labels can be displayed centered with the slice at a customizable distance from the center of the pie.",
      "source": "ScottPlot.Plot myPlot = new();\n\nPieSlice slice1 = new() { Value = 5, FillColor = Colors.Red, Label = \u0022Red\u0022 };\nPieSlice slice2 = new() { Value = 2, FillColor = Colors.Orange, Label = \u0022Orange\u0022 };\nPieSlice slice3 = new() { Value = 8, FillColor = Colors.Gold, Label = \u0022Yellow\u0022 };\nPieSlice slice4 = new() { Value = 4, FillColor = Colors.Green, Label = \u0022Green\u0022 };\nPieSlice slice5 = new() { Value = 8, FillColor = Colors.Blue, Label = \u0022Blue\u0022 };\nList\u003CPieSlice\u003E slices = new() { slice1, slice2, slice3, slice4, slice5 };\n\n// setup the pie to display slice labels\nvar pie = myPlot.Add.Pie(slices);\npie.ExplodeFraction = .1;\npie.ShowSliceLabels = true;\npie.SliceLabelDistance = 1.3;\n\n// styling can be customized for individual slices\nslice5.LabelStyle.FontSize = 22;\nslice5.LabelStyle.ForeColor = Colors.Magenta;\nslice5.LabelStyle.Bold = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSliceLabels",
      "anchorUrl": "/cookbook/5.0/Pie#PieSliceLabels",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSliceLabels",
      "imageUrl": "/cookbook/5.0/images/PieSliceLabels.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Radial gauge from values",
      "description": "A radial gauge chart can be created from a few values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 100, 80, 65, 45, 20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeQuickstart",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeQuickstart",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeQuickstart",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Colors",
      "description": "Gauge colors can be customized by changing the default palette.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeColormap",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeColormap",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeColormap",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeColormap.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Negative Values",
      "description": "Radial gauge plots support positive and negative values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, -65, 45, -20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeNegative",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeNegative",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeNegative",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeNegative.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Sequential Gauge Mode",
      "description": "Sequential gauge mode indicates that the base of each gauge starts at the tip of the previous gauge.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 50 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.Sequential;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeSequential",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeSequential",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeSequential",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeSequential.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Reverse Order",
      "description": "Gauges are displayed from the center outward by default but the order can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 50 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.Sequential;\nradialGaugePlot.OrderInsideOut = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeReverse",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeReverse",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeReverse",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeReverse.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Single Gauge Mode",
      "description": "The SingleGauge mode draws all gauges stacked together as a single gauge. This is useful for showing a progress gauges composed of many individual smaller gauges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.SingleGauge;\nradialGaugePlot.MaximumAngle = 180;\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeModeSingle",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeModeSingle",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeModeSingle",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeModeSingle.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Direction",
      "description": "The direction of gauges can be customized. Clockwise is used by default.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Clockwise = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeDirection",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeDirection",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeDirection",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeDirection.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Size",
      "description": "The empty space between gauges can be adjusted as a fraction of their width. ",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.SpaceFraction = .05;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeSize",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeSize",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeSize",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeSize.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Starting Angle",
      "description": "The starting angle for gauges can be customized. 270 for North (default value), 0 for East, 90 for South, 180 for West, etc.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeStart",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeStart",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeStart",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeStart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Angular Range",
      "description": "By default gauges are full circles (360 degrees) but smaller gauges can be created by customizing the gauge size.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.MaximumAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeRange",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeRange",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeRange",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeRange.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Show Levels",
      "description": "The value of each gauge is displayed as text by default but this behavior can be overridden. Note that this is different than the labels fiels which is what appears in the legened.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.ShowLevels = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabels",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabels",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabels",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabels.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Label Position",
      "description": "Gauge level text is positioned at the tip of each gauge by default, but this position can be adjusted by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.LabelPositionFraction = 0.5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelPos",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelPos",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelPos",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelPos.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Label Font Percentage",
      "description": "Size of the gauge level text as a fraction of the gauge width.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.FontSizeFraction = .4;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelFontPct",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelFontPct",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelFontPct",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelFontPct.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Label Color",
      "description": "Level text fonts may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Font.Color = Colors.Black;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelColor",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelColor",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelColor",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelColor.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Gauge Labels in Legend",
      "description": "Radial gauge labels will appear in the legend if they are assigned. ",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Labels = new string[] { \u0022alpha\u0022, \u0022beta\u0022, \u0022gamma\u0022, \u0022delta\u0022, \u0022epsilon\u0022 };\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLegend",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLegend",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLegend",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLegend.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Background Gauges Dim",
      "description": "By default the full range of each gauge is drawn as a semitransparent ring. The amount of transparency can be adjusted as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.BackgroundTransparencyFraction = .5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeBackDim",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeBackDim",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeBackDim",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeBackDim.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Radial gauge",
      "name": "Background Gauges Normalization",
      "description": "Gauge backgrounds are drawn as full circles by default. This behavior can be disabled to draw partial backgrounds for non-circular gauges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.CircularBackground = false;\nradialGaugePlot.MaximumAngle = 180;\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeBackNorm",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeBackNorm",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeBackNorm",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeBackNorm.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot Quickstart",
      "description": "Scatter plots can be created from two arrays containing X and Y values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = { 1, 2, 3, 4, 5 };\ndouble[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterQuickstart",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterQuickstart",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterQuickstart",
      "imageUrl": "/cookbook/5.0/images/ScatterQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot Coordinates",
      "description": "Scatter plots can be created from a collection of Coordinates.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] coordinates =\n{\n    new(1, 1),\n    new(2, 4),\n    new(3, 9),\n    new(4, 16),\n    new(5, 25),\n};\n\nmyPlot.Add.Scatter(coordinates);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterCoordinates",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterCoordinates",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterCoordinates",
      "imageUrl": "/cookbook/5.0/images/ScatterCoordinates.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot Data Type",
      "description": "Scatter plots can be created from any numeric data type, not just double.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfloat[] xs = { 1, 2, 3, 4, 5 };\nint[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterDataType",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterDataType",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterDataType",
      "imageUrl": "/cookbook/5.0/images/ScatterDataType.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot of List Data",
      "description": "Scatter plots can be created from Lists, but be very cafeful not to add or remove items while a render is occurring or you may throw an index exception. See documentation about the Render Lock system for details.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003Cdouble\u003E xs = new() { 1, 2, 3, 4, 5 };\nList\u003Cdouble\u003E ys = new() { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterList",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterList",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterList",
      "imageUrl": "/cookbook/5.0/images/ScatterList.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Lines Only",
      "description": "The \u0060ScatterLine()\u0060 method can be used to create a scatter plot with a line only (marker size is set to 0).",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.ScatterLine(xs, sin);\nmyPlot.Add.ScatterLine(xs, cos);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLine",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLine",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLine",
      "imageUrl": "/cookbook/5.0/images/ScatterLine.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Points Only",
      "description": "The \u0060ScatterPoints()\u0060 method can be used to create a scatter plot with markers only (line width is set to 0).",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.ScatterPoints(xs, sin);\nmyPlot.Add.ScatterPoints(xs, cos);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterPoints",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterPoints",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterPoints",
      "imageUrl": "/cookbook/5.0/images/ScatterPoints.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot Styling",
      "description": "Scatter plots can be extensively styled by interacting with the object that is returned after a scatter plot is added. Assign text to a scatter plot\u0027s Label property to allow it to appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys1 = Generate.Sin(51);\ndouble[] ys2 = Generate.Cos(51);\n\nvar sp1 = myPlot.Add.Scatter(xs, ys1);\nsp1.Label = \u0022Sine\u0022;\nsp1.LineWidth = 3;\nsp1.Color = Colors.Magenta;\nsp1.MarkerSize = 15;\n\nvar sp2 = myPlot.Add.Scatter(xs, ys2);\nsp2.Label = \u0022Cosine\u0022;\nsp2.LineWidth = 2;\nsp2.Color = Colors.Green;\nsp2.MarkerSize = 10;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterStyling",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterStyling",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterStyling",
      "imageUrl": "/cookbook/5.0/images/ScatterStyling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Line Patterns",
      "description": "Several line patterns are available",
      "source": "ScottPlot.Plot myPlot = new();\n\nLinePattern[] patterns = Enum.GetValues\u003CLinePattern\u003E();\nScottPlot.Palettes.ColorblindFriendly palette = new();\n\nfor (int i = 0; i \u003C patterns.Length; i\u002B\u002B)\n{\n    double yOffset = patterns.Length - i;\n    double[] xs = Generate.Consecutive(51);\n    double[] ys = Generate.Sin(51, offset: yOffset);\n\n    var sp = myPlot.Add.Scatter(xs, ys);\n    sp.LineWidth = 2;\n    sp.MarkerSize = 0;\n    sp.LinePattern = patterns[i];\n    sp.Color = palette.GetColor(i);\n\n    var txt = myPlot.Add.Text(patterns[i].ToString(), 51, yOffset);\n    txt.Label.ForeColor = sp.Color;\n    txt.Label.FontSize = 22;\n    txt.Label.Bold = true;\n    txt.Label.Alignment = Alignment.MiddleLeft;\n}\n\nmyPlot.Axes.Margins(.05, .5, .05, .05);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLinePatterns",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLinePatterns",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLinePatterns",
      "imageUrl": "/cookbook/5.0/images/ScatterLinePatterns.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Generic",
      "description": "Scatter plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint[] xs = { 1, 2, 3, 4, 5 };\nfloat[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterGeneric",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterGeneric",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterGeneric",
      "imageUrl": "/cookbook/5.0/images/ScatterGeneric.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter DateTime",
      "description": "A scatter plot may use DateTime units but be sure to setup the respective axis to display using DateTime format.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime[] xs = Generate.DateTime.Days(100);\ndouble[] ys = Generate.RandomWalk(xs.Length);\n\nmyPlot.Add.Scatter(xs, ys);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterDateTime",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterDateTime",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterDateTime",
      "imageUrl": "/cookbook/5.0/images/ScatterDateTime.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Step Plot",
      "description": "Scatter plots can be created using a step plot display where points are connected with right angles instead of diagnal lines. The direction of the steps can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(20);\ndouble[] ys1 = Generate.Consecutive(20, first: 10);\ndouble[] ys2 = Generate.Consecutive(20, first: 5);\ndouble[] ys3 = Generate.Consecutive(20, first: 0);\n\nvar sp1 = myPlot.Add.Scatter(xs, ys1);\nsp1.ConnectStyle = ConnectStyle.Straight;\nsp1.Label = \u0022Straight\u0022;\n\nvar sp2 = myPlot.Add.Scatter(xs, ys2);\nsp2.ConnectStyle = ConnectStyle.StepHorizontal;\nsp2.Label = \u0022StepHorizontal\u0022;\n\nvar sp3 = myPlot.Add.Scatter(xs, ys3);\nsp3.ConnectStyle = ConnectStyle.StepVertical;\nsp3.Label = \u0022StepVertical\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterStep",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterStep",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterStep",
      "imageUrl": "/cookbook/5.0/images/ScatterStep.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter with Gaps",
      "description": "NaN values in a scatter plot\u0027s data will appear as gaps in the line.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\n// long stretch of empty data\nfor (int i = 10; i \u003C 20; i\u002B\u002B)\n    ys[i] = double.NaN;\n\n// single missing data point\nys[30] = double.NaN;\n\n// single floating data point\nfor (int i = 35; i \u003C 40; i\u002B\u002B)\n    ys[i] = double.NaN;\nfor (int i = 40; i \u003C 45; i\u002B\u002B)\n    ys[i] = double.NaN;\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterWithGaps",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterWithGaps",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterWithGaps",
      "imageUrl": "/cookbook/5.0/images/ScatterWithGaps.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Smooth Lines",
      "description": "Scatter plots draw straight lines between points by default, but setting the Smooth property allows the scatter plot to connect points with smooth lines. Lines are smoothed using cubic spline interpolation.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.RandomSample(10, 5, 15);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.Smooth = true;\nsp.Label = \u0022Smooth\u0022;\nsp.LineWidth = 2;\nsp.MarkerSize = 10;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterSmooth",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterSmooth",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterSmooth",
      "imageUrl": "/cookbook/5.0/images/ScatterSmooth.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Smooth Line Tension",
      "description": "Tension of smooth lines can be adjusted for some smoothing strategies. Low tensions lead to \u0027overshoot\u0027 and high tensions produce curveswhich appear more like straight lines.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.RandomWalk(10);\ndouble[] ys = Generate.RandomWalk(10);\n\nvar mk = myPlot.Add.Markers(xs, ys);\nmk.MarkerShape = MarkerShape.OpenCircle;\nmk.Color = Colors.Black;\n\ndouble[] tensions = { 0.3, 0.5, 1.0, 3.0 };\n\nforeach (double tension in tensions)\n{\n    var sp = myPlot.Add.ScatterLine(xs, ys);\n    sp.Smooth = true;\n    sp.SmoothTension = tension;\n    sp.Label = $\u0022Tension {tension}\u0022;\n    sp.LineWidth = 2;\n}\n\nmyPlot.ShowLegend(Alignment.UpperLeft);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterSmoothTension",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterSmoothTension",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterSmoothTension",
      "imageUrl": "/cookbook/5.0/images/ScatterSmoothTension.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Smooth Scatter without Overshoot",
      "description": "The quadratic half point path strategy allows scatter plots to be displayed with smooth lines connecting points, but lines are eased in and out of points so they never \u0027overshoot\u0027 the values vertically.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.RandomSample(10, 5, 15);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.PathStrategy = new ScottPlot.PathStrategies.QuadHalfPoint();\nsp.Label = \u0022Smooth\u0022;\nsp.LineWidth = 2;\nsp.MarkerSize = 10;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterQuad",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterQuad",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterQuad",
      "imageUrl": "/cookbook/5.0/images/ScatterQuad.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Scatter Plot",
      "name": "Limiting Display with Render Indexes",
      "description": "Although a scatter plot may contain a very large amount of data, much of it may be unpopulated. The user can define min and max render indexes, and only values within that range will be displayed when the scatter plot is rendered.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.MinRenderIndex = 10;\nsp.MaxRenderIndex = 40;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLimitIndex",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLimitIndex",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLimitIndex",
      "imageUrl": "/cookbook/5.0/images/ScatterLimitIndex.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Shapes",
      "name": "Rectangle",
      "description": "A rectangle can be added to the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a rectangle by specifying points\nmyPlot.Add.Rectangle(0, 1, 0, 1);\n\n// add a rectangle using more expressive shapes\nCoordinates location = new(2, 0);\nCoordinateSize size = new(1, 1);\nCoordinateRect rect = new(location, size);\nmyPlot.Add.Rectangle(rect);\n\n// style rectangles after they are added to the plot\nvar rp = myPlot.Add.Rectangle(4, 5, 0, 1);\nrp.FillStyle.Color = Colors.Magenta.WithAlpha(.2);\nrp.LineStyle.Color = Colors.Green;\nrp.LineStyle.Width = 3;\nrp.LineStyle.Pattern = LinePattern.Dashed;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "RectangleQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#RectangleQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/RectangleQuickstart",
      "imageUrl": "/cookbook/5.0/images/RectangleQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Shapes",
      "name": "Circle",
      "description": "A circle can be placed on the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar c1 = myPlot.Add.Circle(1, 0, .5);\nvar c2 = myPlot.Add.Circle(2, 0, .5);\nvar c3 = myPlot.Add.Circle(3, 0, .5);\n\nc1.FillStyle.Color = Colors.Blue;\nc2.FillStyle.Color = Colors.Blue.Darken(.75);\nc3.FillStyle.Color = Colors.Blue.Lighten(.75);\n\nc1.LineWidth = 0;\nc2.LineWidth = 0;\nc3.LineWidth = 0;\n\n// force circles to remain circles\nScottPlot.AxisRules.SquareZoomOut squareRule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(squareRule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "CircleQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#CircleQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/CircleQuickstart",
      "imageUrl": "/cookbook/5.0/images/CircleQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Shapes",
      "name": "Ellipse",
      "description": "An ellipse can be placed on the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    var el = myPlot.Add.Ellipse(0, 0, 1, 10, rotation: i * 10);\n    double fraction = i / 10.0;\n    el.LineColor = Colors.Blue.WithAlpha(fraction);\n}\n\n// force circles to remain circles\nScottPlot.AxisRules.SquareZoomOut squareRule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(squareRule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "EllipseQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#EllipseQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/EllipseQuickstart",
      "imageUrl": "/cookbook/5.0/images/EllipseQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Shapes",
      "name": "Polygon Plot Quickstart",
      "description": "Polygon plots can be added from a series of vertices, and must be in clockwise order.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] points =\n{\n    new(0,   0.25),\n    new(0.3, 0.75),\n    new(1,   1),\n    new(0.7, 0.5),\n    new(1,   0)\n};\n\nmyPlot.Add.Polygon(points);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "PolygonQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#PolygonQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/PolygonQuickstart",
      "imageUrl": "/cookbook/5.0/images/PolygonQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Shapes",
      "name": "Polygon Plot Styling",
      "description": "Polygon plots can be fully customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] points =\n{\n    new (0, 0.25),\n    new (0.3, 0.75),\n    new (1, 1),\n    new (0.7, 0.5),\n    new (1, 0)\n};\n\nvar poly = myPlot.Add.Polygon(points);\n\npoly.FillStyle = new FillStyle\n{\n    Color = Colors.Green,\n    HatchColor = Colors.Blue,\n    Hatch = new Gradient()\n    {\n        GradientType = GradientType.Linear,\n        AlignmentStart = Alignment.UpperRight,\n        AlignmentEnd = Alignment.LowerLeft,\n    }\n};\n\npoly.LineStyle = new LineStyle\n{\n    AntiAlias = true,\n    Color = Colors.Black,\n    Pattern = LinePattern.Dashed,\n    Width = 2\n};\n\npoly.MarkerStyle = new MarkerStyle(MarkerShape.OpenCircle, 8);\npoly.MarkerStyle.Fill.Color = Colors.Gold;\npoly.MarkerStyle.Outline.Color = Colors.Brown;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "PolygonStyling",
      "anchorUrl": "/cookbook/5.0/Shapes#PolygonStyling",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/PolygonStyling",
      "imageUrl": "/cookbook/5.0/images/PolygonStyling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal Plot Quickstart",
      "description": "Signal plots are best for extremely large datasets. They use render using special optimizations that allow highspeed interactivity with plots containing millions of data points.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.RandomWalk(1_000_000);\n\nmyPlot.Add.Signal(values);\n\nmyPlot.Title(\u0022Signal Plot with 1 Million Points\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalQuickstart",
      "anchorUrl": "/cookbook/5.0/Signal#SignalQuickstart",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal Plot Styling",
      "description": "Signal plots can be styled in a variety of ways.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nsig1.Color = Colors.Magenta;\nsig1.LineWidth = 10;\nsig1.Label = \u0022Sine\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig2.Color = Colors.Green;\nsig2.LineWidth = 5;\nsig2.Label = \u0022Cosine\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalStyling",
      "anchorUrl": "/cookbook/5.0/Signal#SignalStyling",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalStyling",
      "imageUrl": "/cookbook/5.0/images/SignalStyling.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal Offset",
      "description": "Signal plots can be offset by a given X and Y value.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = ScottPlot.Generate.Sin(51);\n\nvar sig1 = myPlot.Add.Signal(values);\nsig1.Label = \u0022Default\u0022;\n\nvar sig2 = myPlot.Add.Signal(values);\nsig2.Data.XOffset = 10;\nsig2.Data.YOffset = .25;\nsig2.Label = \u0022Offset\u0022;\n\nmyPlot.Legend.IsVisible = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalOffset",
      "anchorUrl": "/cookbook/5.0/Signal#SignalOffset",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalOffset",
      "imageUrl": "/cookbook/5.0/images/SignalOffset.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal Marker Size",
      "description": "Signal plots can have markers displayed at each point which are only visible when the plot is zoomed in.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Cos());\nsig1.Label = \u0022Default\u0022;\nsig1.Data.YOffset = 3;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig2.Label = \u0022Large Markers\u0022;\nsig2.MaximumMarkerSize = 20;\nsig2.Data.YOffset = 2;\n\nvar sig3 = myPlot.Add.Signal(Generate.Cos());\nsig3.Label = \u0022Hidden Markers\u0022;\nsig3.MaximumMarkerSize = 0;\nsig3.Data.YOffset = 1;\n\nmyPlot.Legend.IsVisible = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalMarkerSize",
      "anchorUrl": "/cookbook/5.0/Signal#SignalMarkerSize",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalMarkerSize",
      "imageUrl": "/cookbook/5.0/images/SignalMarkerSize.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Partial Signal Rendering",
      "description": "Even if a signal plot references a large array of data, rendering can be limited to a range of values. If set,only the range of data between the minimum and maximum render indexes will be displayed.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.RandomWalk(1000);\n\nvar sigAll = myPlot.Add.Signal(values);\nsigAll.Label = \u0022Full\u0022;\nsigAll.Data.YOffset = 80;\n\nvar sigLeft = myPlot.Add.Signal(values);\nsigLeft.Label = \u0022Left\u0022;\nsigLeft.Data.YOffset = 60;\nsigLeft.Data.MaximumIndex = 700;\n\nvar sigRight = myPlot.Add.Signal(values);\nsigRight.Label = \u0022Right\u0022;\nsigRight.Data.YOffset = 40;\nsigRight.Data.MinimumIndex = 300;\n\nvar sigMid = myPlot.Add.Signal(values);\nsigMid.Label = \u0022Mid\u0022;\nsigMid.Data.YOffset = 20;\nsigMid.Data.MinimumIndex = 300;\nsigMid.Data.MaximumIndex = 700;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\nmyPlot.Axes.Margins(top: .5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalRenderIndexes",
      "anchorUrl": "/cookbook/5.0/Signal#SignalRenderIndexes",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalRenderIndexes",
      "imageUrl": "/cookbook/5.0/images/SignalRenderIndexes.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal Generic",
      "description": "Signal plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint[] values = Generate.RandomIntegers(1000, -100, 100);\n\nmyPlot.Add.Signal(values);\n\nmyPlot.Title(\u0022Signal Plot with 1 Million Points\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalGeneric",
      "anchorUrl": "/cookbook/5.0/Signal#SignalGeneric",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalGeneric",
      "imageUrl": "/cookbook/5.0/images/SignalGeneric.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Signal DateTime",
      "description": "A signal plot may use DateTime units but be sure to setup the respective axis to display using DateTime format.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime start = new(2024, 1, 1);\ndouble[] ys = Generate.RandomWalk(200);\n\nvar sig = myPlot.Add.Signal(ys);\nsig.Data.XOffset = start.ToOADate();\nsig.Data.Period = 1.0; // one day between each point\n\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalDateTime",
      "anchorUrl": "/cookbook/5.0/Signal#SignalDateTime",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalDateTime",
      "imageUrl": "/cookbook/5.0/images/SignalDateTime.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalConst",
      "name": "SignalConst Quickstart",
      "description": "SignalConst can display data with millions of points at high framerates, ideal for interactive manipulation of large datasets.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] data = Generate.RandomWalk(1_000_000);\nmyPlot.Add.SignalConst(data);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalConst",
      "recipeClassName": "SignalConstQuickstart",
      "anchorUrl": "/cookbook/5.0/SignalConst#SignalConstQuickstart",
      "categoryUrl": "/cookbook/5.0/SignalConst",
      "recipeUrl": "/cookbook/5.0/SignalConst/SignalConstQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalConstQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalConst.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "SignalXY Quickstart",
      "description": "SignalXY plots are a high performance plot type for X/Y data where the X values are always ascending.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate sample data with gaps\nList\u003Cdouble\u003E xList = new();\nList\u003Cdouble\u003E yList = new();\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    xList.AddRange(Generate.Consecutive(1000, first: 2000 * i));\n    yList.AddRange(Generate.RandomSample(1000));\n}\ndouble[] xs = xList.ToArray();\ndouble[] ys = yList.ToArray();\n\n// add a SignalXY plot\nmyPlot.Add.SignalXY(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYQuickstart",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYQuickstart",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalXYQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "SignalXY Generic",
      "description": "SignalXY plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate sample data with gaps\nList\u003Cint\u003E xList = new();\nList\u003Cfloat\u003E yList = new();\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    xList.AddRange(Generate.Consecutive(1000, first: 2000 * i).Select(x =\u003E (int)x));\n    yList.AddRange(Generate.RandomSample(1000).Select(x =\u003E (float)x));\n}\nint[] xs = xList.ToArray();\nfloat[] ys = yList.ToArray();\n\n// add a SignalXY plot\nmyPlot.Add.SignalXY(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYGeneric",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYGeneric",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYGeneric",
      "imageUrl": "/cookbook/5.0/images/SignalXYGeneric.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "Partial SignalXY Rendering",
      "description": "Even if a SignalXY plot references a large array of data, rendering can be limited to a range of values. If set,only the range of data between the minimum and maximum render indexes will be displayed.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.RandomWalk(1000);\n\nvar sigAll = myPlot.Add.SignalXY(xs, ys);\nsigAll.Label = \u0022Full\u0022;\nsigAll.Data.YOffset = 80;\n\nvar sigLeft = myPlot.Add.SignalXY(xs, ys);\nsigLeft.Label = \u0022Left\u0022;\nsigLeft.Data.YOffset = 60;\nsigLeft.Data.MaximumIndex = 700;\n\nvar sigRight = myPlot.Add.SignalXY(xs, ys);\nsigRight.Label = \u0022Right\u0022;\nsigRight.Data.YOffset = 40;\nsigRight.Data.MinimumIndex = 300;\n\nvar sigMid = myPlot.Add.SignalXY(xs, ys);\nsigMid.Label = \u0022Mid\u0022;\nsigMid.Data.YOffset = 20;\nsigMid.Data.MinimumIndex = 300;\nsigMid.Data.MaximumIndex = 700;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\nmyPlot.Axes.Margins(top: .5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYRenderIndexes",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYRenderIndexes",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYRenderIndexes",
      "imageUrl": "/cookbook/5.0/images/SignalXYRenderIndexes.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "SignalXY Offset",
      "description": "A fixed offset can be applied to SignalXY plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.Sin(1000);\n\nvar sig1 = myPlot.Add.SignalXY(xs, ys);\n\nvar sig2 = myPlot.Add.SignalXY(xs, ys);\nsig2.Data.XOffset = 250;\nsig2.Data.YOffset = .5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYOffset",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYOffset",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYOffset",
      "imageUrl": "/cookbook/5.0/images/SignalXYOffset.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY",
      "description": "Although SignalXY plots typically display data left-to-right, it is possible to use this plot type to display data bottom-to-top.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.RandomWalk(1000);\n\nvar sig1 = myPlot.Add.SignalXY(xs, ys);\nsig1.Data.Rotated = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "VerticalSignalXY",
      "anchorUrl": "/cookbook/5.0/SignalXY#VerticalSignalXY",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/VerticalSignalXY",
      "imageUrl": "/cookbook/5.0/images/VerticalSignalXY.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY with Inverted X Axis",
      "description": "Demonstrates how to display a rotated SignalXY plot (so it goes from bottom to top) which is also displayed on an inverted horizontal axis (where positive values are on the left).",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a signal plot\ndouble[] xs = Generate.Consecutive(5_000);\ndouble[] ys = Generate.Sin(count: xs.Length, oscillations: 4);\n\n// rotate it so it is vertical\nvar signal = myPlot.Add.SignalXY(xs, ys);\nsignal.Data.Rotated = true;\n\n// invert the horizontal axis\nmyPlot.Axes.SetLimitsX(1, -1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYVerticalInvertedX",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYVerticalInvertedX",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYVerticalInvertedX",
      "imageUrl": "/cookbook/5.0/images/SignalXYVerticalInvertedX.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY with Inverted Y Axis",
      "description": "Demonstrates how to display a rotated SignalXY plot on an inverted vertical axis so data goes from top to bottom.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a signal plot\ndouble[] xs = Generate.Consecutive(5_000);\ndouble[] ys = Generate.Sin(count: xs.Length, oscillations: 4);\n\n// rotate it so it is vertical\nvar signal = myPlot.Add.SignalXY(xs, ys);\nsignal.Data.Rotated = true;\n\n// invert the vertical axis\nmyPlot.Axes.SetLimitsY(5000, 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYVerticalInvertedY",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYVerticalInvertedY",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYVerticalInvertedY",
      "imageUrl": "/cookbook/5.0/images/SignalXYVerticalInvertedY.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "SignalXY Plot",
      "name": "SignalXY with Markers",
      "description": "Users can enable a marker to be displayedat each data point. However, this can reduce performance for extremely large datasets.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sig = myPlot.Add.SignalXY(xs, ys);\nsig.MarkerStyle.Shape = MarkerShape.FilledCircle;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYMarkers",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYMarkers",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYMarkers",
      "imageUrl": "/cookbook/5.0/images/SignalXYMarkers.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Text Quickstart",
      "description": "Text can be placed anywhere in coordinate space.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\nmyPlot.Add.Text(\u0022Hello, World\u0022, 25, 0.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "TextQuickstart",
      "anchorUrl": "/cookbook/5.0/Text#TextQuickstart",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/TextQuickstart",
      "imageUrl": "/cookbook/5.0/images/TextQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Text Formatting",
      "description": "Text formatting can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar text = myPlot.Add.Text(\u0022Hello, World\u0022, 42, 69);\ntext.Label.FontSize = 26;\ntext.Label.Bold = true;\ntext.Label.Rotation = -45;\ntext.Label.ForeColor = Colors.Yellow;\ntext.Label.BackgroundColor = Colors.Navy.WithAlpha(.5);\ntext.Label.BorderColor = Colors.Magenta;\ntext.Label.BorderWidth = 3;\ntext.Label.Padding = 10;\ntext.Label.Alignment = Alignment.MiddleCenter;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "Formatting",
      "anchorUrl": "/cookbook/5.0/Text#Formatting",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/Formatting",
      "imageUrl": "/cookbook/5.0/images/Formatting.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Line Height",
      "description": "Multiline labels have a default line height estimated from the typeface and font size, however line height may be manually defined by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar label1 = myPlot.Add.Text($\u0022line\\nheight\u0022, 0, 0);\nlabel1.LineSpacing = 0;\nlabel1.FontColor = Colors.Red;\n\nvar label2 = myPlot.Add.Text($\u0022can\\nbe\u0022, 1, 0);\nlabel2.LineSpacing = 10;\nlabel2.FontColor = Colors.Orange;\n\nvar label3 = myPlot.Add.Text($\u0022automatic\\nor\u0022, 2, 0);\nlabel3.LineSpacing = null;\nlabel3.FontColor = Colors.Green;\n\nvar label4 = myPlot.Add.Text($\u0022set\\nmanually\u0022, 3, 0);\nlabel4.LineSpacing = 15;\nlabel4.FontColor = Colors.Blue;\n\nmyPlot.Axes.SetLimitsX(-.5, 4);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "LabelLineHeight",
      "anchorUrl": "/cookbook/5.0/Text#LabelLineHeight",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/LabelLineHeight",
      "imageUrl": "/cookbook/5.0/images/LabelLineHeight.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Text Offset",
      "description": "The offset properties can be used to fine-tune text position in pixel units",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 25; i \u002B= 5)\n{\n    // place a marker at the point\n    var marker = myPlot.Add.Marker(i, 1);\n\n    // place a styled text label at the point\n    var txt = myPlot.Add.Text($\u0022{i}\u0022, i, 1);\n    txt.FontSize = 16;\n    txt.BorderColor = Colors.Black;\n    txt.BorderWidth = 1;\n    txt.Padding = 2;\n    txt.Bold = true;\n    txt.BackgroundColor = marker.Color.WithAlpha(.5);\n\n    // offset the text label by the given number of pixels\n    txt.OffsetX = i;\n    txt.OffsetY = i;\n}\n\nmyPlot.Axes.SetLimitsX(-5, 30);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "TextOffset",
      "anchorUrl": "/cookbook/5.0/Text#TextOffset",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/TextOffset",
      "imageUrl": "/cookbook/5.0/images/TextOffset.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Vector Field",
      "name": "Vector Field Quickstart",
      "description": "Vectors (representing a magnitude and direction) can be placed at specific points in coordinate space to display as a vector field.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate a grid of positions\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.Consecutive(10);\n\n// create a collection of vectors\nList\u003CRootedCoordinateVector\u003E vectors = new();\nfor (int i = 0; i \u003C xs.Length; i\u002B\u002B)\n{\n    for (int j = 0; j \u003C ys.Length; j\u002B\u002B)\n    {\n        // point on the grid\n        Coordinates pt = new(xs[i], ys[j]);\n\n        // direction \u0026 magnitude\n        float dX = (float)ys[j];\n        float dY = -9.81f / 0.5f * (float)Math.Sin(xs[i]);\n        System.Numerics.Vector2 v = new(dX, dY);\n\n        // add to the collection\n        RootedCoordinateVector vector = new(pt, v);\n        vectors.Add(vector);\n    }\n}\n\n// plot the collection of rooted vectors as a vector field\nmyPlot.Add.VectorField(vectors);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "VectorField",
      "recipeClassName": "VectorFieldQuickstart",
      "anchorUrl": "/cookbook/5.0/VectorField#VectorFieldQuickstart",
      "categoryUrl": "/cookbook/5.0/VectorField",
      "recipeUrl": "/cookbook/5.0/VectorField/VectorFieldQuickstart",
      "imageUrl": "/cookbook/5.0/images/VectorFieldQuickstart.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/VectorField.cs"
    },
    {
      "chapter": "Plot Types",
      "category": "Vector Field",
      "name": "Vector Field Colormap",
      "description": "Vector field arrows can be colored according to their magnitude.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRootedCoordinateVector[] vectors = Generate.SampleVectors();\nvar vf = myPlot.Add.VectorField(vectors);\nvf.Colormap = new ScottPlot.Colormaps.Turbo();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "VectorField",
      "recipeClassName": "VectorFieldColormap",
      "anchorUrl": "/cookbook/5.0/VectorField#VectorFieldColormap",
      "categoryUrl": "/cookbook/5.0/VectorField",
      "recipeUrl": "/cookbook/5.0/VectorField/VectorFieldColormap",
      "imageUrl": "/cookbook/5.0/images/VectorFieldColormap.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/VectorField.cs"
    },
    {
      "chapter": "Statistics",
      "category": "Regression",
      "name": "LinearRegression",
      "description": "Fit a line to a collection of X/Y data points.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = new double[] { 1, 2, 3, 4, 5, 6, 7 };\ndouble[] ys = new double[] { 2, 2, 3, 3, 3.8, 4.2, 4 };\n\n// plot original data as a scatter plot\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.LineStyle = LineStyle.None;\nsp.MarkerSize = 10;\n\n// calculate the regression line\nScottPlot.Statistics.LinearRegression reg = new(xs, ys);\n\n// plot the regression line\nCoordinates pt1 = new(xs.First(), reg.GetValue(xs.First()));\nCoordinates pt2 = new(xs.Last(), reg.GetValue(xs.Last()));\nvar line = myPlot.Add.Line(pt1, pt2);\nline.MarkerSize = 0;\nline.LineWidth = 2;\nline.LinePattern = LinePattern.Dashed;\n\n// note the formula at the top of the plot\nmyPlot.Title(reg.FormulaWithRSquared);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Regression",
      "recipeClassName": "Linear",
      "anchorUrl": "/cookbook/5.0/Regression#Linear",
      "categoryUrl": "/cookbook/5.0/Regression",
      "recipeUrl": "/cookbook/5.0/Regression/Linear",
      "imageUrl": "/cookbook/5.0/images/Linear.png?240414161950",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Statistics/Regression.cs"
    }
  ]
}